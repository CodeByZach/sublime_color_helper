{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About ColorHelper ColorHelper ColorHelper makes working with colors easier by providing inline color previews in your documents ( ST3 build 3118+) and offers popups with color previews, color conversion, and allows the storing and accessing of favorite colors in color palettes. It even provides tools for calculating color contrast, interpolating between colors, and more. Features Inline color previews. Useful tooltip popups that show the previews of selected colors. Support colors in CSS, SCSS, SASS, HTML attributes, and more. Allow saving, accessing, and managing colors in named color palettes all from the tooltip. Select and insert colors from the color palettes via the tooltip. Convert between color spaces. Supports rgb , hsl , hwb , lch , lab , and more! Color picker, color interpolating, and color contrast tool.","title":"Overview"},{"location":"#about-colorhelper","text":"","title":"About ColorHelper"},{"location":"#colorhelper","text":"ColorHelper makes working with colors easier by providing inline color previews in your documents ( ST3 build 3118+) and offers popups with color previews, color conversion, and allows the storing and accessing of favorite colors in color palettes. It even provides tools for calculating color contrast, interpolating between colors, and more.","title":"ColorHelper"},{"location":"#features","text":"Inline color previews. Useful tooltip popups that show the previews of selected colors. Support colors in CSS, SCSS, SASS, HTML attributes, and more. Allow saving, accessing, and managing colors in named color palettes all from the tooltip. Select and insert colors from the color palettes via the tooltip. Convert between color spaces. Supports rgb , hsl , hwb , lch , lab , and more! Color picker, color interpolating, and color contrast tool.","title":"Features"},{"location":"faq/","text":"Frequently Asked Questions Duplicate Colors? If you are seeing duplicate color previews, it may be because you have an LSP server installed that is injecting its own previews or some other package. While we can't provide an exhaustive list, we've provided a few known examples. Often, the duplicate colors may have a slightly different style, and when you click them, they will not not open the ColorHelper dialog. LSP Two such examples are LSP-css and LSP-json . The solution is to disable either ColorHelper or the color provider for the LSP package. If you are here, you probably enjoy ColorHelper's features and would prefer to disable the LSP package provider. If so, you can do the following. For LSP-css : In case it's LSP-css , you can disable the color boxes as follows: Run Preferences: LSP-css Settings from the Command Palette. Then add: \"disabled_capabilities\" : { \"colorProvider\" : true , }, For LSP-json : In case it's LSP-json , you can disable the color boxes as follows: Run Preferences: LSP-json Settings from the Command Palette. Then add: { \"disabled_capabilities\" : { // the trigger characters are too blunt, we'll specify auto_complete_selector manually \"completionProvider\" : { \"triggerCharacters\" : true }, \"colorProvider\" : true } } There may be other LSP packages. It is assumed the approach would be similar for all of them. Just make sure to check what the default disabled capabilities are and copy them over in addition to adding your own. Advanced Substation Alpha (ASS) One package that comes with color previews out of the box is the Advanced Substation Alpha (ASS) package. You can disable their color previews by modifying it's settings with the following. Navigate to Preferences -> Package Settings -> Advanced Substation Alpha (ASS) -> Settings . Then add: { // when to show a color phantom beside a color code? // can be \"never\", \"always\" or \"hover\" \"show_color_phantom\" : \"never\" , } Hex Uppercase How do I output hex in uppercase? Some people prefer hex to all be in uppercase, and some may prefer lowercase. ColorHelper, by default, outputs strings in lowercase. But worry not, as you can change this via the settings. ColorHelper 2 used to have a upper_case_hex option, but ColorHelper 3 is a bit different. In order to make ColorHelper more flexible than ever, we created a dependency called coloraide which is used to handle all the conversions, CSS string parsing, and CSS string output. This library allows for each color space to define its own string output options . These options are exposed via the settings. Each configuration for a given file type will specify a \"color class\". For instance, HTML and CSS use css-level-4 by default. \"color_rules\" : [ { \"name\" : \"HTML/CSS\" , \"base_scopes\" : [ \"source.css\" , \"text.html\" ], \"color_class\" : \"css-level-4\" , // <--- specified color class If there was a desire to make make any rule that uses css-level-4 output hex in uppercase, the color class configuration options could be overridden in user_color_classes : \"user_color_classes\" : { \"css-level-4\" : { \"output\" : [ { \"space\" : \"srgb\" , \"format\" : { \"hex\" : true , \"upper\" : true }}, // <--- `upper` forces hex to uppercase { \"space\" : \"srgb\" , \"format\" : { \"comma\" : true }}, { \"space\" : \"hsl\" , \"format\" : { \"comma\" : true }}, { \"space\" : \"hwb\" , \"format\" : { \"comma\" : false }}, { \"space\" : \"lch\" , \"format\" : { \"comma\" : false }}, { \"space\" : \"lab\" , \"format\" : { \"comma\" : false }}, { \"space\" : \"display-p3\" , \"format\" : {}}, { \"space\" : \"rec2020\" , \"format\" : {}}, { \"space\" : \"prophoto-rgb\" , \"format\" : {}}, { \"space\" : \"a98-rgb\" , \"format\" : {}}, { \"space\" : \"xyz\" , \"format\" : {}} ] } }, Simply reference the name of the color class you wish to override under user_color_classes , specify the \"key\" you wish to override ( output in our case) and provide your new preferences. Any options that would normally be passed to ColorAide's to_string function can be passed via the format parameter under output . In our case, we want to pass in upper as True .","title":"Frequently Asked Questions"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#duplicate-colors","text":"If you are seeing duplicate color previews, it may be because you have an LSP server installed that is injecting its own previews or some other package. While we can't provide an exhaustive list, we've provided a few known examples. Often, the duplicate colors may have a slightly different style, and when you click them, they will not not open the ColorHelper dialog.","title":"Duplicate Colors?"},{"location":"faq/#lsp","text":"Two such examples are LSP-css and LSP-json . The solution is to disable either ColorHelper or the color provider for the LSP package. If you are here, you probably enjoy ColorHelper's features and would prefer to disable the LSP package provider. If so, you can do the following. For LSP-css : In case it's LSP-css , you can disable the color boxes as follows: Run Preferences: LSP-css Settings from the Command Palette. Then add: \"disabled_capabilities\" : { \"colorProvider\" : true , }, For LSP-json : In case it's LSP-json , you can disable the color boxes as follows: Run Preferences: LSP-json Settings from the Command Palette. Then add: { \"disabled_capabilities\" : { // the trigger characters are too blunt, we'll specify auto_complete_selector manually \"completionProvider\" : { \"triggerCharacters\" : true }, \"colorProvider\" : true } } There may be other LSP packages. It is assumed the approach would be similar for all of them. Just make sure to check what the default disabled capabilities are and copy them over in addition to adding your own.","title":"LSP"},{"location":"faq/#advanced-substation-alpha-ass","text":"One package that comes with color previews out of the box is the Advanced Substation Alpha (ASS) package. You can disable their color previews by modifying it's settings with the following. Navigate to Preferences -> Package Settings -> Advanced Substation Alpha (ASS) -> Settings . Then add: { // when to show a color phantom beside a color code? // can be \"never\", \"always\" or \"hover\" \"show_color_phantom\" : \"never\" , }","title":"Advanced Substation Alpha (ASS)"},{"location":"faq/#hex-uppercase","text":"How do I output hex in uppercase? Some people prefer hex to all be in uppercase, and some may prefer lowercase. ColorHelper, by default, outputs strings in lowercase. But worry not, as you can change this via the settings. ColorHelper 2 used to have a upper_case_hex option, but ColorHelper 3 is a bit different. In order to make ColorHelper more flexible than ever, we created a dependency called coloraide which is used to handle all the conversions, CSS string parsing, and CSS string output. This library allows for each color space to define its own string output options . These options are exposed via the settings. Each configuration for a given file type will specify a \"color class\". For instance, HTML and CSS use css-level-4 by default. \"color_rules\" : [ { \"name\" : \"HTML/CSS\" , \"base_scopes\" : [ \"source.css\" , \"text.html\" ], \"color_class\" : \"css-level-4\" , // <--- specified color class If there was a desire to make make any rule that uses css-level-4 output hex in uppercase, the color class configuration options could be overridden in user_color_classes : \"user_color_classes\" : { \"css-level-4\" : { \"output\" : [ { \"space\" : \"srgb\" , \"format\" : { \"hex\" : true , \"upper\" : true }}, // <--- `upper` forces hex to uppercase { \"space\" : \"srgb\" , \"format\" : { \"comma\" : true }}, { \"space\" : \"hsl\" , \"format\" : { \"comma\" : true }}, { \"space\" : \"hwb\" , \"format\" : { \"comma\" : false }}, { \"space\" : \"lch\" , \"format\" : { \"comma\" : false }}, { \"space\" : \"lab\" , \"format\" : { \"comma\" : false }}, { \"space\" : \"display-p3\" , \"format\" : {}}, { \"space\" : \"rec2020\" , \"format\" : {}}, { \"space\" : \"prophoto-rgb\" , \"format\" : {}}, { \"space\" : \"a98-rgb\" , \"format\" : {}}, { \"space\" : \"xyz\" , \"format\" : {}} ] } }, Simply reference the name of the color class you wish to override under user_color_classes , specify the \"key\" you wish to override ( output in our case) and provide your new preferences. Any options that would normally be passed to ColorAide's to_string function can be passed via the format parameter under output . In our case, we want to pass in upper as True .","title":"Hex Uppercase"},{"location":"installation/","text":"Installation Package Control The recommended way to install ColorHelper is via Package Control . Package Control will install the correct branch on your system and keep it up to date. Ensure Package Control is installed. Instructions are found here . In Sublime Text, press ctrl + shift + p (Win, Linux) or cmd + shift + p (mac OS) to bring up the quick panel and start typing Package Control: Install Package . Select the command and it will show a list of installable plugins. Start typing ColorHelper ; when you see it, select it. Restart to be sure everything is loaded proper. Enjoy! Manual Installation Warning This is not the recommended way to install ColorHelper for the average user. Installing this way will not get automatically updated. If you are forking for a pull request, you should just clone ColorHelper and run Package Control's Satisfy Dependency command to get all the dependencies. For those who want to install ColorHelper without package control, here are the steps. It understood that some people for what ever reason will prefer manually and may even have legitimate reasons to do so. When going this route, you will have to keep all the packages updated yourself. Download the latest releases of the following dependencies and unpack or git clone in the Packages folder as shown below: facelessuser/sublime-markdown-popups -> mdpopups Download and unpack or git clone the latest ColorHelper release and unpack as ColorHelper : CodeByZach/sublime_color_helper -> ColorHelper Create a folder under Packages called 00-dependencies and under that folder create a file called 00-dependencies.py : Copy the following code to 00-dependencies.py (this code was taken from Package Control): import sys import os from os.path import dirname if os . name == 'nt' : from ctypes import windll , create_unicode_buffer import sublime if sys . version_info >= ( 3 ,): def decode ( path ): return path def encode ( path ): return path if os . path . basename ( __file__ ) == 'sys_path.py' : pc_package_path = dirname ( dirname ( __file__ )) # When loaded as a .sublime-package file, the filename ends up being # Package Control.sublime-package/Package Control.package_control.sys_path else : pc_package_path = dirname ( __file__ ) st_version = u '3' else : def decode ( path ): if not isinstance ( path , unicode ): path = path . decode ( sys . getfilesystemencoding ()) return path def encode ( path ): if isinstance ( path , unicode ): path = path . encode ( sys . getfilesystemencoding ()) return path pc_package_path = decode ( os . getcwd ()) st_version = u '2' st_dir = dirname ( dirname ( pc_package_path )) def add ( path , first = False ): \"\"\" Adds an entry to the beginning of sys.path, working around the fact that Python 2.6 can't import from non-ASCII paths on Windows. :param path: A unicode string of a folder, zip file or sublime-package file to add to the path :param first: If the path should be added at the beginning \"\"\" if os . name == 'nt' : # Work around unicode path import issue on Windows with Python 2.6 buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value enc_path = encode ( path ) if os . path . exists ( enc_path ): if first : try : sys . path . remove ( enc_path ) except ( ValueError ): pass sys . path . insert ( 0 , enc_path ) elif enc_path not in sys . path : sys . path . append ( enc_path ) def remove ( path ): \"\"\" Removes a path from sys.path if it is present :param path: A unicode string of a folder, zip file or sublime-package file \"\"\" try : sys . path . remove ( encode ( path )) except ( ValueError ): pass if os . name == 'nt' : buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value try : sys . path . remove ( encode ( path )) except ( ValueError ): pass def generate_dependency_paths ( name ): \"\"\" Accepts a dependency name and generates a dict containing the three standard import paths that are valid for the current machine. :param name: A unicode string name of the dependency :return: A dict with the following keys: - 'ver' - 'plat' - 'arch' \"\"\" packages_dir = os . path . join ( st_dir , u 'Packages' ) dependency_dir = os . path . join ( packages_dir , name ) ver = u 'st %s ' % st_version plat = sublime . platform () arch = sublime . arch () return { 'all' : os . path . join ( dependency_dir , 'all' ), 'ver' : os . path . join ( dependency_dir , ver ), 'plat' : os . path . join ( dependency_dir , u ' %s _ %s ' % ( ver , plat )), 'arch' : os . path . join ( dependency_dir , u ' %s _ %s _ %s ' % ( ver , plat , arch )) } def add_dependency ( name , first = False ): \"\"\" Accepts a dependency name and automatically adds the appropriate path to sys.path, if the dependency has a path for the current platform and architecture. :param name: A unicode string name of the dependency :param first: If the path should be added to the beginning of the list \"\"\" dep_paths = generate_dependency_paths ( name ) for path in dep_paths . values (): if os . path . exists ( encode ( path )): add ( path , first = first ) add_dependency ( 'mdpopups' ) Restart and enjoy. Git Cloning Quit Sublime Text. Open a terminal and enter the following. For dependencies replace the URL with the appropriate URL, and the appropriate folder to check it out to: cd /path/to/Sublime Text 3/Packages git clone https://github.com/CodeByZach/sublime_color_helper.git ColorHelper Restart Sublime Text.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#package-control","text":"The recommended way to install ColorHelper is via Package Control . Package Control will install the correct branch on your system and keep it up to date. Ensure Package Control is installed. Instructions are found here . In Sublime Text, press ctrl + shift + p (Win, Linux) or cmd + shift + p (mac OS) to bring up the quick panel and start typing Package Control: Install Package . Select the command and it will show a list of installable plugins. Start typing ColorHelper ; when you see it, select it. Restart to be sure everything is loaded proper. Enjoy!","title":"Package Control"},{"location":"installation/#manual-installation","text":"Warning This is not the recommended way to install ColorHelper for the average user. Installing this way will not get automatically updated. If you are forking for a pull request, you should just clone ColorHelper and run Package Control's Satisfy Dependency command to get all the dependencies. For those who want to install ColorHelper without package control, here are the steps. It understood that some people for what ever reason will prefer manually and may even have legitimate reasons to do so. When going this route, you will have to keep all the packages updated yourself. Download the latest releases of the following dependencies and unpack or git clone in the Packages folder as shown below: facelessuser/sublime-markdown-popups -> mdpopups Download and unpack or git clone the latest ColorHelper release and unpack as ColorHelper : CodeByZach/sublime_color_helper -> ColorHelper Create a folder under Packages called 00-dependencies and under that folder create a file called 00-dependencies.py : Copy the following code to 00-dependencies.py (this code was taken from Package Control): import sys import os from os.path import dirname if os . name == 'nt' : from ctypes import windll , create_unicode_buffer import sublime if sys . version_info >= ( 3 ,): def decode ( path ): return path def encode ( path ): return path if os . path . basename ( __file__ ) == 'sys_path.py' : pc_package_path = dirname ( dirname ( __file__ )) # When loaded as a .sublime-package file, the filename ends up being # Package Control.sublime-package/Package Control.package_control.sys_path else : pc_package_path = dirname ( __file__ ) st_version = u '3' else : def decode ( path ): if not isinstance ( path , unicode ): path = path . decode ( sys . getfilesystemencoding ()) return path def encode ( path ): if isinstance ( path , unicode ): path = path . encode ( sys . getfilesystemencoding ()) return path pc_package_path = decode ( os . getcwd ()) st_version = u '2' st_dir = dirname ( dirname ( pc_package_path )) def add ( path , first = False ): \"\"\" Adds an entry to the beginning of sys.path, working around the fact that Python 2.6 can't import from non-ASCII paths on Windows. :param path: A unicode string of a folder, zip file or sublime-package file to add to the path :param first: If the path should be added at the beginning \"\"\" if os . name == 'nt' : # Work around unicode path import issue on Windows with Python 2.6 buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value enc_path = encode ( path ) if os . path . exists ( enc_path ): if first : try : sys . path . remove ( enc_path ) except ( ValueError ): pass sys . path . insert ( 0 , enc_path ) elif enc_path not in sys . path : sys . path . append ( enc_path ) def remove ( path ): \"\"\" Removes a path from sys.path if it is present :param path: A unicode string of a folder, zip file or sublime-package file \"\"\" try : sys . path . remove ( encode ( path )) except ( ValueError ): pass if os . name == 'nt' : buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value try : sys . path . remove ( encode ( path )) except ( ValueError ): pass def generate_dependency_paths ( name ): \"\"\" Accepts a dependency name and generates a dict containing the three standard import paths that are valid for the current machine. :param name: A unicode string name of the dependency :return: A dict with the following keys: - 'ver' - 'plat' - 'arch' \"\"\" packages_dir = os . path . join ( st_dir , u 'Packages' ) dependency_dir = os . path . join ( packages_dir , name ) ver = u 'st %s ' % st_version plat = sublime . platform () arch = sublime . arch () return { 'all' : os . path . join ( dependency_dir , 'all' ), 'ver' : os . path . join ( dependency_dir , ver ), 'plat' : os . path . join ( dependency_dir , u ' %s _ %s ' % ( ver , plat )), 'arch' : os . path . join ( dependency_dir , u ' %s _ %s _ %s ' % ( ver , plat , arch )) } def add_dependency ( name , first = False ): \"\"\" Accepts a dependency name and automatically adds the appropriate path to sys.path, if the dependency has a path for the current platform and architecture. :param name: A unicode string name of the dependency :param first: If the path should be added to the beginning of the list \"\"\" dep_paths = generate_dependency_paths ( name ) for path in dep_paths . values (): if os . path . exists ( encode ( path )): add ( path , first = first ) add_dependency ( 'mdpopups' ) Restart and enjoy.","title":"Manual Installation"},{"location":"installation/#git-cloning","text":"Quit Sublime Text. Open a terminal and enter the following. For dependencies replace the URL with the appropriate URL, and the appropriate folder to check it out to: cd /path/to/Sublime Text 3/Packages git clone https://github.com/CodeByZach/sublime_color_helper.git ColorHelper Restart Sublime Text.","title":"Git Cloning"},{"location":"usage/","text":"User Guide Overview ColorHelper is a plugin for generating color previews. It also provides a couple of useful tools. ColorHelper provides support for a number of color spaces: sRGB, HSL, HWB, LCH, LAB, and more. Note Popups are provided by the mdpopups dependency. Color Previews When color previews are enabled, ColorHelper detects colors in the visible viewport, it will create previews right next to every color it finds. When the preview is clicked, a popup will appear which gives access to tools and other features. If desired, previews can be configured to only show when a color is selected. Color Gamut and Previews Colors that are out of the preview gamut space (the default being sRGB) will be gamut mapped. If on ST4 , hovering over the color previews will show a tooltip mentioning that the color is out of gamut. This is to remind the user that the color they see has been \"fit\" to the preview color space. If gamut mapping is disabled, the color will be displayed in such a way as to indicate that it is out of gamut. Sublime Text is not currently aware of gamut spaces in general and treats all colors as generic RGB. This means that color schemes, images, popups, phantoms all just take the RGB values at face value and hands them to the system. So, a color scheme defining HSL, RGB, and the like, which are all in the sRGB gamut, are passed to the system without any modifications based on the actual color profile. So on a macOS system with a Display P3 monitor, those assumed sRGB colors will be treated as Display P3 colors. In this case, reds and greens and blues will be more saturated and generally not correct. As a workaround ColorHelper allows you to change the preview gamut with the gamut_space option. If on a macOS system with a Display P3 display, we can simply set gamut_space to display-p3 and we will get more accurate previews for both sRGB colors and Display P3 colors without needing to perform gamut mapping. But keep in mind, this setting should not be changed to a gamut space your monitor does not support or is not currently using or your previews will, likely be distorted. New in 3.8.0 gamut_space is a new experimental option added in 3.8.0. Gamut Space Option is Experimental The gamut_space option is experimental, and at some future time may no longer function properly if Sublime ever addresses the color gamut issues. Color Info The Color Info Panel is the main panel. It shows a large color preview and gives access to various tools, such as conversions, access to a color picker, etc. You can colors and add them to your favorites, or save them away in other palettes than can be accessed later. Color Picker Native Color Picker? Some people prefer native color pickers, if you'd like to use your operating system's built-in color picker, see the use_os_color_picker option. The internal color picker can be launched from the view's context menu, the command palette, or from the Color Info Panel . By default, when launched, it will use the current selected color. The internal color picker is contained inside a popup. It has a color map box at the top where different colors can be selected. You can toggle between altering the color in the sRGB, HSL, or HWB color space. You can also switch between the color map box and sliders. The color channels are coarse, but can generally allow you to get close to a color that you like. As you select colors in the channels the selections will shift revealing more selections until the bounds of the color channel are reached. If you need finer selections, you can click the button to the left and a scrollable tooltip with much finer selections will appear so that you can select the best suited value. If you would like to pick from a list of CSS color names, you can select the color names link and a CSS Color Names panel will open: When done, simply select the select link to insert the color back into the document. Out of the box hsl , hsv , and srgb are spaces that are enabled when doing color picking. srgb just uses hsl with sRGB channel sliders. If desired, a couple additional color spaces can be used: okhsl and okhsv (HSL and HSV variants based on Oklab) or HWB (HSL picker with with HWB sliders). This can all be configured in the settings. Additionally, if you desire a certain color space to always be used, you can turn off the \"auto\" mode and even specify what your preferred color space for the color picker should be. Edit Tool Experimental Color Interpolation This is an experimental feature, and syntax and behavior is subject to change. The current logic for interpolating is based on the CSS Level 5 Specification , particularly the recent drafts. While the syntax does not follow the specification, the basic logic does. The only logical issue is that if a percentage is applied to both colors, and the sum of those percentages add up to zero, it is unclear what to do as this behavior is currently undefined in the specification and will causes a divide by zero in the percent normalization algorithm. If this case occurs, we currently perform no interpolation and return nothing for this case. In all honestly, it should be rare for someone to try do this as it can only be achieved by either setting both percentages to zero, or to use two opposing percentages, such as 50% and -50%. Neither of these cases are practical. The edit tool allows for the editing and mixing (by interpolation) of colors. While editing, the panel will display a live preview. When @colorspace is specified, the output of the color will be in the given space. Additionally, if mixing, the tool will also interpolate colors in the provided space. If no space is specified, the color space of the first color is used for any interpolations and will be the output color space. The default mixing percentage is 50%, but percents can manually be added to a color to specify a percentage other than the default. If a percentage is only specified on one color, the other color is assumed to be interpolated at 100 - p , where p is the specified percent. If percentages are specified on both colors, they must must add up to 100%, and if they do not, they will be normalized. The tool can be launched from the quick panel (if a color is selected), from the info panel, or even the color picker. When editing is complete, simply press enter and the color will be returned to the document for inserting, or to the color picker if launched from there. Color Contrast Tool Contrast and Colors Outside the sRGB gamut Composition of transparent colors are defaulted to the sRGB color space. The contrast ration targeting algorithm is also specific to the sRGB color gamut. For this reason, all colors that are outside of the sRGB gamut are gamut mapped to be within the sRGB color space. The contrast tool allows for viewing a color's contrast ratio or quickly adjusting a color to meet a minimum contrast ratio (if the ratio is achievable). When the color is updated, a visual representation of the foreground and background color will be rendered along with information detailing the relative luminance of the colors and the contrast ratio. If a a ratio is specified, the foreground color will be adjusted in an attempt to meet that requirement. The tool can be launched from the quick panel (if a color is selected), from the info panel, or even the color picker. When editing is complete, simply press enter and the color will be handed returned to the document for inserting, or to the color picker if launched from there. Sublime ColorMod Tool The Sublime ColorMod tool allows for entering in Sublime color-mod syntax and should render a color fairly close to what Sublime does. This can be useful in theme or color scheme development. The tool can be launched from the quick panel (if a color is selected), from the info panel, or even the color picker. When editing is complete, simply press enter and the color will be handed returned to the document for inserting, or to the color picker if launched from there. Blend Modes Tool The blend mode tool provides an interface to blend two colors using one of the various supported blend modes. Any color can be specified, but only colors with RGB-ish color spaces should really be used as the blend algorithms are primarily designed for such color spaces. By default, the normal blend mode is used unless a different blend mode is specified with !blendmode . Different color spaces can be used by specifying @colorspace , but it is strongly encouraged to only use RGB-ish color spaces: sRGB, Display P3, Rec. 2020, etc. To learn more about the support supported blend modes, check out coloraide Documentation . Blend modes are specified by lower casing the names and replacing spaces with - . Color Difference Tool The Color Difference tool is used to compare two colors. If you select two colors and execute the Color Difference tool from the command palette, you can enter two colors and get the difference using Delta E 2000 which uses CIELAB to compute the difference. You can change the distance method simply by adding !method at the end. Currently, you can use Delta E 2000 ( !2000 ), Delta E CMC ( !cmc ), Delta E 94 ( !94 ), Delta E 76 ( !76 ), Delta E ITP ( !itp ), or simple Euclidean distancing ( !euclidean ). You can also access this tool from the main color panel or even the context menu. If using the panel, the current color will be inserted as the initial text. Keep in mind, if using !euclidean , the color space of the first color is used, and Cylindrical color spaces don't work well. If Enter is pressed, the first color will be returned and Color Helper will prompt you to replace the first selected color in your view. If you do not want this, just dismiss the dialog with Esc . Color Palettes ColorHelper allows for saving colors in color palettes. These are either saved globally or in project specific settings. When clicking a palette, all the colors within it will be displayed. You can add the current color to any palette you choose, or insert a color from one of your palettes into the active file. While you can manually save or delete colors from \"Favorites\", colors can also be quickly saved away or removed from the global \"Favorites\" palette by staring or un-staring a color from the main panel. Creation and deletion of palettes and colors can be managed directly from the ColorHelper tooltip panels.","title":"User Guide"},{"location":"usage/#user-guide","text":"","title":"User Guide"},{"location":"usage/#overview","text":"ColorHelper is a plugin for generating color previews. It also provides a couple of useful tools. ColorHelper provides support for a number of color spaces: sRGB, HSL, HWB, LCH, LAB, and more. Note Popups are provided by the mdpopups dependency.","title":"Overview"},{"location":"usage/#color-previews","text":"When color previews are enabled, ColorHelper detects colors in the visible viewport, it will create previews right next to every color it finds. When the preview is clicked, a popup will appear which gives access to tools and other features. If desired, previews can be configured to only show when a color is selected.","title":"Color Previews"},{"location":"usage/#color-gamut-and-previews","text":"Colors that are out of the preview gamut space (the default being sRGB) will be gamut mapped. If on ST4 , hovering over the color previews will show a tooltip mentioning that the color is out of gamut. This is to remind the user that the color they see has been \"fit\" to the preview color space. If gamut mapping is disabled, the color will be displayed in such a way as to indicate that it is out of gamut. Sublime Text is not currently aware of gamut spaces in general and treats all colors as generic RGB. This means that color schemes, images, popups, phantoms all just take the RGB values at face value and hands them to the system. So, a color scheme defining HSL, RGB, and the like, which are all in the sRGB gamut, are passed to the system without any modifications based on the actual color profile. So on a macOS system with a Display P3 monitor, those assumed sRGB colors will be treated as Display P3 colors. In this case, reds and greens and blues will be more saturated and generally not correct. As a workaround ColorHelper allows you to change the preview gamut with the gamut_space option. If on a macOS system with a Display P3 display, we can simply set gamut_space to display-p3 and we will get more accurate previews for both sRGB colors and Display P3 colors without needing to perform gamut mapping. But keep in mind, this setting should not be changed to a gamut space your monitor does not support or is not currently using or your previews will, likely be distorted. New in 3.8.0 gamut_space is a new experimental option added in 3.8.0. Gamut Space Option is Experimental The gamut_space option is experimental, and at some future time may no longer function properly if Sublime ever addresses the color gamut issues.","title":"Color Gamut and Previews"},{"location":"usage/#color-info","text":"The Color Info Panel is the main panel. It shows a large color preview and gives access to various tools, such as conversions, access to a color picker, etc. You can colors and add them to your favorites, or save them away in other palettes than can be accessed later.","title":"Color Info"},{"location":"usage/#color-picker","text":"Native Color Picker? Some people prefer native color pickers, if you'd like to use your operating system's built-in color picker, see the use_os_color_picker option. The internal color picker can be launched from the view's context menu, the command palette, or from the Color Info Panel . By default, when launched, it will use the current selected color. The internal color picker is contained inside a popup. It has a color map box at the top where different colors can be selected. You can toggle between altering the color in the sRGB, HSL, or HWB color space. You can also switch between the color map box and sliders. The color channels are coarse, but can generally allow you to get close to a color that you like. As you select colors in the channels the selections will shift revealing more selections until the bounds of the color channel are reached. If you need finer selections, you can click the button to the left and a scrollable tooltip with much finer selections will appear so that you can select the best suited value. If you would like to pick from a list of CSS color names, you can select the color names link and a CSS Color Names panel will open: When done, simply select the select link to insert the color back into the document. Out of the box hsl , hsv , and srgb are spaces that are enabled when doing color picking. srgb just uses hsl with sRGB channel sliders. If desired, a couple additional color spaces can be used: okhsl and okhsv (HSL and HSV variants based on Oklab) or HWB (HSL picker with with HWB sliders). This can all be configured in the settings. Additionally, if you desire a certain color space to always be used, you can turn off the \"auto\" mode and even specify what your preferred color space for the color picker should be.","title":"Color Picker"},{"location":"usage/#edit-tool","text":"Experimental Color Interpolation This is an experimental feature, and syntax and behavior is subject to change. The current logic for interpolating is based on the CSS Level 5 Specification , particularly the recent drafts. While the syntax does not follow the specification, the basic logic does. The only logical issue is that if a percentage is applied to both colors, and the sum of those percentages add up to zero, it is unclear what to do as this behavior is currently undefined in the specification and will causes a divide by zero in the percent normalization algorithm. If this case occurs, we currently perform no interpolation and return nothing for this case. In all honestly, it should be rare for someone to try do this as it can only be achieved by either setting both percentages to zero, or to use two opposing percentages, such as 50% and -50%. Neither of these cases are practical. The edit tool allows for the editing and mixing (by interpolation) of colors. While editing, the panel will display a live preview. When @colorspace is specified, the output of the color will be in the given space. Additionally, if mixing, the tool will also interpolate colors in the provided space. If no space is specified, the color space of the first color is used for any interpolations and will be the output color space. The default mixing percentage is 50%, but percents can manually be added to a color to specify a percentage other than the default. If a percentage is only specified on one color, the other color is assumed to be interpolated at 100 - p , where p is the specified percent. If percentages are specified on both colors, they must must add up to 100%, and if they do not, they will be normalized. The tool can be launched from the quick panel (if a color is selected), from the info panel, or even the color picker. When editing is complete, simply press enter and the color will be returned to the document for inserting, or to the color picker if launched from there.","title":"Edit Tool"},{"location":"usage/#color-contrast-tool","text":"Contrast and Colors Outside the sRGB gamut Composition of transparent colors are defaulted to the sRGB color space. The contrast ration targeting algorithm is also specific to the sRGB color gamut. For this reason, all colors that are outside of the sRGB gamut are gamut mapped to be within the sRGB color space. The contrast tool allows for viewing a color's contrast ratio or quickly adjusting a color to meet a minimum contrast ratio (if the ratio is achievable). When the color is updated, a visual representation of the foreground and background color will be rendered along with information detailing the relative luminance of the colors and the contrast ratio. If a a ratio is specified, the foreground color will be adjusted in an attempt to meet that requirement. The tool can be launched from the quick panel (if a color is selected), from the info panel, or even the color picker. When editing is complete, simply press enter and the color will be handed returned to the document for inserting, or to the color picker if launched from there.","title":"Color Contrast Tool"},{"location":"usage/#sublime-colormod-tool","text":"The Sublime ColorMod tool allows for entering in Sublime color-mod syntax and should render a color fairly close to what Sublime does. This can be useful in theme or color scheme development. The tool can be launched from the quick panel (if a color is selected), from the info panel, or even the color picker. When editing is complete, simply press enter and the color will be handed returned to the document for inserting, or to the color picker if launched from there.","title":"Sublime ColorMod Tool"},{"location":"usage/#blend-modes-tool","text":"The blend mode tool provides an interface to blend two colors using one of the various supported blend modes. Any color can be specified, but only colors with RGB-ish color spaces should really be used as the blend algorithms are primarily designed for such color spaces. By default, the normal blend mode is used unless a different blend mode is specified with !blendmode . Different color spaces can be used by specifying @colorspace , but it is strongly encouraged to only use RGB-ish color spaces: sRGB, Display P3, Rec. 2020, etc. To learn more about the support supported blend modes, check out coloraide Documentation . Blend modes are specified by lower casing the names and replacing spaces with - .","title":"Blend Modes Tool"},{"location":"usage/#color-difference-tool","text":"The Color Difference tool is used to compare two colors. If you select two colors and execute the Color Difference tool from the command palette, you can enter two colors and get the difference using Delta E 2000 which uses CIELAB to compute the difference. You can change the distance method simply by adding !method at the end. Currently, you can use Delta E 2000 ( !2000 ), Delta E CMC ( !cmc ), Delta E 94 ( !94 ), Delta E 76 ( !76 ), Delta E ITP ( !itp ), or simple Euclidean distancing ( !euclidean ). You can also access this tool from the main color panel or even the context menu. If using the panel, the current color will be inserted as the initial text. Keep in mind, if using !euclidean , the color space of the first color is used, and Cylindrical color spaces don't work well. If Enter is pressed, the first color will be returned and Color Helper will prompt you to replace the first selected color in your view. If you do not want this, just dismiss the dialog with Esc .","title":"Color Difference Tool"},{"location":"usage/#color-palettes","text":"ColorHelper allows for saving colors in color palettes. These are either saved globally or in project specific settings. When clicking a palette, all the colors within it will be displayed. You can add the current color to any palette you choose, or insert a color from one of your palettes into the active file. While you can manually save or delete colors from \"Favorites\", colors can also be quickly saved away or removed from the global \"Favorites\" palette by staring or un-staring a color from the main panel. Creation and deletion of palettes and colors can be managed directly from the ColorHelper tooltip panels.","title":"Color Palettes"},{"location":"_snippets/abbr/","text":"","title":"Abbr"},{"location":"_snippets/links/","text":"","title":"Links"},{"location":"_snippets/refs/","text":"","title":"Refs"},{"location":"about/contributing/","text":"Contributing & Support Overview Sublime Versions Description ST3 Fully supported and actively maintained. ST4 Fully supports the early development releases. Contribution from the community is encouraged and can be done in a variety of ways: Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests. Bug Reports Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When an issue is created, a template will be shown, please fill out the appropriate sections. If the template is not followed, the issue will be marked Invalid and closed. When creating an issue on the repository, please provide as much info as possible: Provide environment information by running Preferences->Package Settings->ColorHelper->Support Info . The information will be copied to the clipboard; paste the info in issue. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. Provide links to 3 rd party syntax highlighting package you are using if applicable. The more info provided, the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed. Reviewing Code Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm. Pull Requests Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Please describe the change in as much detail as possible so I can understand what is being added or modified. If you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been resolved). Please reference and link related open bugs or feature requests in this pull if applicable. Make sure you've documented or updated the existing documentation if introducing a new feature or modifying the behavior of an existing feature that a user needs to be aware of. I will not accept new features or changes to existing features if you have not provided documentation describing the feature. Continuous integration tests on are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge. Running Validation Tests Tip If you are running Sublime on a Mac OS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below): chmod +x run_tests.sh ./run_tests.sh There are a couple of dependencies that must be present before running the tests. As ST3 is the only current, actively supported version, Python 3.3 must be used to validate the tests. Unit tests are run with pytest . You can install pytest via: pip install pytest The tests should be run from the root folder of the plugin by using the following command: py.test . Linting is performed on the entire project with flake8 , flake8-docstrings , and pep8-naming . These can be installed via: pip install flake8 pip install flake8-docstrings pip install pep8-naming Linting is performed with the following command: flake8 . Documentation Improvements A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of MkDocs , the Material theme , and PyMdown Extensions to render the docs. You can preview the docs if you install these two packages. The command for previewing the docs is mkdocs serve from the root directory. You can then view the documents at localhost:8000 .","title":"Contributing &amp; Support"},{"location":"about/contributing/#contributing--support","text":"","title":"Contributing &amp; Support"},{"location":"about/contributing/#overview","text":"Sublime Versions Description ST3 Fully supported and actively maintained. ST4 Fully supports the early development releases. Contribution from the community is encouraged and can be done in a variety of ways: Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests.","title":"Overview"},{"location":"about/contributing/#bug-reports","text":"Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When an issue is created, a template will be shown, please fill out the appropriate sections. If the template is not followed, the issue will be marked Invalid and closed. When creating an issue on the repository, please provide as much info as possible: Provide environment information by running Preferences->Package Settings->ColorHelper->Support Info . The information will be copied to the clipboard; paste the info in issue. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. Provide links to 3 rd party syntax highlighting package you are using if applicable. The more info provided, the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.","title":"Bug Reports"},{"location":"about/contributing/#reviewing-code","text":"Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.","title":"Reviewing Code"},{"location":"about/contributing/#pull-requests","text":"Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Please describe the change in as much detail as possible so I can understand what is being added or modified. If you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been resolved). Please reference and link related open bugs or feature requests in this pull if applicable. Make sure you've documented or updated the existing documentation if introducing a new feature or modifying the behavior of an existing feature that a user needs to be aware of. I will not accept new features or changes to existing features if you have not provided documentation describing the feature. Continuous integration tests on are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.","title":"Pull Requests"},{"location":"about/contributing/#running-validation-tests","text":"Tip If you are running Sublime on a Mac OS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below): chmod +x run_tests.sh ./run_tests.sh There are a couple of dependencies that must be present before running the tests. As ST3 is the only current, actively supported version, Python 3.3 must be used to validate the tests. Unit tests are run with pytest . You can install pytest via: pip install pytest The tests should be run from the root folder of the plugin by using the following command: py.test . Linting is performed on the entire project with flake8 , flake8-docstrings , and pep8-naming . These can be installed via: pip install flake8 pip install flake8-docstrings pip install pep8-naming Linting is performed with the following command: flake8 .","title":"Running Validation Tests"},{"location":"about/contributing/#documentation-improvements","text":"A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of MkDocs , the Material theme , and PyMdown Extensions to render the docs. You can preview the docs if you install these two packages. The command for previewing the docs is mkdocs serve from the root directory. You can then view the documents at localhost:8000 .","title":"Documentation Improvements"},{"location":"about/license/","text":"License ColorHelper is released under the MIT license. Copyright \u00a9 2015 - 2021 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE","title":"License"},{"location":"about/license/#license","text":"ColorHelper is released under the MIT license. Copyright \u00a9 2015 - 2021 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE","title":"License"},{"location":"settings/","text":"Configuring ColorHelper Overview Settings for Color Helper are contained within the ColorHelper.sublime-settings file. There are a number of options that control the ColorHelper experience. This ranges from tweaking how colors are previewed, what colors are scanned in what files, what features are enabled, etc. Multiconf Certain settings, which are likely to be useful as per OS settings or per host, will be configured to use multiconf . multiconf is a library that will parse a setting as a normal setting or a per OS and/or per host setting (if configured properly). For the settings that have this enabled, you can optionally use the format below to specify the setting per OS or per host. The optional multiconf format requires a dictionary with a special identifier #multiconf# and a list of dictionaries identified by a qualifier in the form: \"<qualifier name>:<qualifier value>[;<qualifier name>:<qualifier value>]...\" For example, the following setting \"user_home\" : \"/home\" would result in get(\"user_home\") returning the value \"/home\" but it could also be replaced with \"user_home\" : { \"#multiconf#\" : [ { \"os:windows\" : \"C:\\\\Users\" }, { \"os:linux;host:his_pc\" : \"/home\" }, { \"os:linux;host:her_pc\" : \"/home/her/special\" } ] } Now, the same configuration file will provide different values depending on the machine it's on. On an MS Windows machine the value returned by get will be \"C:\\Users\", and on a Linux machine with the host name his_pc the value will be \"/home\", etc.","title":"Configuring ColorHelper"},{"location":"settings/#configuring-colorhelper","text":"","title":"Configuring ColorHelper"},{"location":"settings/#overview","text":"Settings for Color Helper are contained within the ColorHelper.sublime-settings file. There are a number of options that control the ColorHelper experience. This ranges from tweaking how colors are previewed, what colors are scanned in what files, what features are enabled, etc.","title":"Overview"},{"location":"settings/#multiconf","text":"Certain settings, which are likely to be useful as per OS settings or per host, will be configured to use multiconf . multiconf is a library that will parse a setting as a normal setting or a per OS and/or per host setting (if configured properly). For the settings that have this enabled, you can optionally use the format below to specify the setting per OS or per host. The optional multiconf format requires a dictionary with a special identifier #multiconf# and a list of dictionaries identified by a qualifier in the form: \"<qualifier name>:<qualifier value>[;<qualifier name>:<qualifier value>]...\" For example, the following setting \"user_home\" : \"/home\" would result in get(\"user_home\") returning the value \"/home\" but it could also be replaced with \"user_home\" : { \"#multiconf#\" : [ { \"os:windows\" : \"C:\\\\Users\" }, { \"os:linux;host:his_pc\" : \"/home\" }, { \"os:linux;host:her_pc\" : \"/home/her/special\" } ] } Now, the same configuration file will provide different values depending on the machine it's on. On an MS Windows machine the value returned by get will be \"C:\\Users\", and on a Linux machine with the host name his_pc the value will be \"/home\", etc.","title":"Multiconf"},{"location":"settings/color_picker/","text":"Color Picker enable_color_picker Enables the ability to launch the color picker from the tooltip. By default, the internal color picker will be used. // Enable color picker option. Will use native color picker // unless \"use_color_picker_package\" is enabled and external // package is installed. \"enable_color_picker\" : true , use_os_color_picker If you wish to use your native color picker available with your OS, you can set this option to True . This will use the native color picker on macOS and Windows. If on Linux, and you have kcolorchooser installed (KDE not required) and in your command line path, then it will be used. // Use native, OS specific color pickers. Linux requires `kcolorchooser`. \"use_os_color_picker\" : false , enabled_color_picker_modes By default color pickers are available in the sRGB, HSL, and HSV color space. sRGB actually just uses the HSL color space picker with sRGB sliders. In addition to the default color pickers, one can enable HWB (HSL color picker with HWB sliders) and Okhsl and Okhsv which are alternatives to the HSL and HSV but derived from the Oklab color space. // Enable the preferred color picker options: `srgb`, `hsl`, `hsv`, `hwb`, `okhsl`, and `okhsv` // If no valid spaces are specified, `srgb` will be used. \"enabled_color_picker_modes\" : [ \"srgb\" , \"hsl\" , \"hsv\" ], auto_color_picker_mode Controls whether ColorHelper, based on the input color, decides which color space to use. If a matching color space cannot be found, the preferred color space picker will be selected. // If the color is already in the space of an enabled mode, use that mode. // If disabled, the \"preferred\" mode will be used. \"auto_color_picker_mode\" : true , preferred_color_picker_mode The preferred color picker space to use. If invalid or not enabled, the first enabled color space will be used, and if there are none enabled, srgb will be used as a last resort. // If \"auto\" mode is disabled, or the \"auto\" mode could not determine a suitable picker, // the preferrreed color picker space will be used. If the preferred is invalid, the // first picker from `enabled_color_picker_modes` will be used, and if that is not valid, // `srgb` will be used. \"preferred_color_picker_mode\" : \"hsl\" ,","title":"Color Picker"},{"location":"settings/color_picker/#color-picker","text":"","title":"Color Picker"},{"location":"settings/color_picker/#enable_color_picker","text":"Enables the ability to launch the color picker from the tooltip. By default, the internal color picker will be used. // Enable color picker option. Will use native color picker // unless \"use_color_picker_package\" is enabled and external // package is installed. \"enable_color_picker\" : true ,","title":"enable_color_picker"},{"location":"settings/color_picker/#use_os_color_picker","text":"If you wish to use your native color picker available with your OS, you can set this option to True . This will use the native color picker on macOS and Windows. If on Linux, and you have kcolorchooser installed (KDE not required) and in your command line path, then it will be used. // Use native, OS specific color pickers. Linux requires `kcolorchooser`. \"use_os_color_picker\" : false ,","title":"use_os_color_picker"},{"location":"settings/color_picker/#enabled_color_picker_modes","text":"By default color pickers are available in the sRGB, HSL, and HSV color space. sRGB actually just uses the HSL color space picker with sRGB sliders. In addition to the default color pickers, one can enable HWB (HSL color picker with HWB sliders) and Okhsl and Okhsv which are alternatives to the HSL and HSV but derived from the Oklab color space. // Enable the preferred color picker options: `srgb`, `hsl`, `hsv`, `hwb`, `okhsl`, and `okhsv` // If no valid spaces are specified, `srgb` will be used. \"enabled_color_picker_modes\" : [ \"srgb\" , \"hsl\" , \"hsv\" ],","title":"enabled_color_picker_modes"},{"location":"settings/color_picker/#auto_color_picker_mode","text":"Controls whether ColorHelper, based on the input color, decides which color space to use. If a matching color space cannot be found, the preferred color space picker will be selected. // If the color is already in the space of an enabled mode, use that mode. // If disabled, the \"preferred\" mode will be used. \"auto_color_picker_mode\" : true ,","title":"auto_color_picker_mode"},{"location":"settings/color_picker/#preferred_color_picker_mode","text":"The preferred color picker space to use. If invalid or not enabled, the first enabled color space will be used, and if there are none enabled, srgb will be used as a last resort. // If \"auto\" mode is disabled, or the \"auto\" mode could not determine a suitable picker, // the preferrreed color picker space will be used. If the preferred is invalid, the // first picker from `enabled_color_picker_modes` will be used, and if that is not valid, // `srgb` will be used. \"preferred_color_picker_mode\" : \"hsl\" ,","title":"preferred_color_picker_mode"},{"location":"settings/graphics/","text":"Graphic Rendering graphic_size Coarse scaling of generated graphics sizes. Graphics in the tooltips look best large as Sublime slightly distorts images, but on different screens, some of the tooltips (especially the internal color picker) may be too large or too small. graphic_size can be used to control the size of these generated images. Scaling is based off line height, and valid settings are small (0.75X), medium (1X), and large (1.25X). medium is the default. // If the color picker is too big or too small, try playing with this. // This is a coarse control which scales image size relative to the // approximate line height. small (0.75x), medium (1x), and large (1.25x). // (small | medium | large) \"graphic_size\" : \"medium\" , If you need to set this per OS or per host, you can via multiconf . graphic_scale Fine scaling of the size of generated graphics. This overrides graphic_size . // Fine scaling of image sizes. Overrides `graphic_size`. // Use an integer or floating point value. `null` disables fine scaling. \"graphic_scale\" : 1.5 , If you need to set this per OS or per host, you can via multiconf . line_height_workaround Temporary workaround for Windows 10 HiDPI setups that reduces image sizes. // For Windows 10 HiDPI setups. This is a temporary workaround // to help reduce abnormally large color previews and other images. // This will be removed once the issue is fixed in Sublime Text 3. \"line_height_workaround\" : false , inline_preview_offset ColorHelper does its best to calculate the correct size for inline images, but with some font's or screen resolutions (or for a reason I don't quite understand) it will get it wrong and create an image larger (or maybe smaller) than your line height which may cause an undesirable look. Set this value to either a positive or negative value which will be applied to the inline preview's image size. // Adjust the size of inline image previews by the offset given. // Please use either a positive or negative number. \"inline_preview_offset\" : 0 , If you need to set this per OS or per host, you can via multiconf . image_border_color For themes with popups that have a very different background than what is found as the default code background, it may be desirable to override image borders with a color that blends better. Colors specified in the setting can be of the of any valid CSS color in the sRGB, HSL, or HWB color space. null can be used to remove your override. // Override image border color. This is mainly for schemes that use a dramatically different // background for popups vs code background. Color should be in the form `#RRGGBB`. Alpha channels will // be ignored. \"image_border_color\" : \"rgb(0 0 0)\"","title":"Graphic Rendering"},{"location":"settings/graphics/#graphic-rendering","text":"","title":"Graphic Rendering"},{"location":"settings/graphics/#graphic_size","text":"Coarse scaling of generated graphics sizes. Graphics in the tooltips look best large as Sublime slightly distorts images, but on different screens, some of the tooltips (especially the internal color picker) may be too large or too small. graphic_size can be used to control the size of these generated images. Scaling is based off line height, and valid settings are small (0.75X), medium (1X), and large (1.25X). medium is the default. // If the color picker is too big or too small, try playing with this. // This is a coarse control which scales image size relative to the // approximate line height. small (0.75x), medium (1x), and large (1.25x). // (small | medium | large) \"graphic_size\" : \"medium\" , If you need to set this per OS or per host, you can via multiconf .","title":"graphic_size"},{"location":"settings/graphics/#graphic_scale","text":"Fine scaling of the size of generated graphics. This overrides graphic_size . // Fine scaling of image sizes. Overrides `graphic_size`. // Use an integer or floating point value. `null` disables fine scaling. \"graphic_scale\" : 1.5 , If you need to set this per OS or per host, you can via multiconf .","title":"graphic_scale"},{"location":"settings/graphics/#line_height_workaround","text":"Temporary workaround for Windows 10 HiDPI setups that reduces image sizes. // For Windows 10 HiDPI setups. This is a temporary workaround // to help reduce abnormally large color previews and other images. // This will be removed once the issue is fixed in Sublime Text 3. \"line_height_workaround\" : false ,","title":"line_height_workaround"},{"location":"settings/graphics/#inline_preview_offset","text":"ColorHelper does its best to calculate the correct size for inline images, but with some font's or screen resolutions (or for a reason I don't quite understand) it will get it wrong and create an image larger (or maybe smaller) than your line height which may cause an undesirable look. Set this value to either a positive or negative value which will be applied to the inline preview's image size. // Adjust the size of inline image previews by the offset given. // Please use either a positive or negative number. \"inline_preview_offset\" : 0 , If you need to set this per OS or per host, you can via multiconf .","title":"inline_preview_offset"},{"location":"settings/graphics/#image_border_color","text":"For themes with popups that have a very different background than what is found as the default code background, it may be desirable to override image borders with a color that blends better. Colors specified in the setting can be of the of any valid CSS color in the sRGB, HSL, or HWB color space. null can be used to remove your override. // Override image border color. This is mainly for schemes that use a dramatically different // background for popups vs code background. Color should be in the form `#RRGGBB`. Alpha channels will // be ignored. \"image_border_color\" : \"rgb(0 0 0)\"","title":"image_border_color"},{"location":"settings/palettes/","text":"Color Palettes enable_global_user_palettes Enables showing user palettes (found in Packages/User/color_helper.palettes ) in the Palette Panel . // Show global palettes in palette panel \"enable_global_user_palettes\" : true , enable_favorite_palette Enables showing the Favorites palette (found in Packages/User/color_helper.palettes ) in the Palette Panel . // Enable storing favorite colors to the favorite palette \"enable_favorite_palette\" : true , enable_project_user_palettes Enables showing and storing of user palettes in the project file. Project palettes will be shown in the Palette Panel . // Enable project palettes in palette panel (Palettes stored in project file). \"enable_project_user_palettes\" : true","title":"Color Palettes"},{"location":"settings/palettes/#color-palettes","text":"","title":"Color Palettes"},{"location":"settings/palettes/#enable_global_user_palettes","text":"Enables showing user palettes (found in Packages/User/color_helper.palettes ) in the Palette Panel . // Show global palettes in palette panel \"enable_global_user_palettes\" : true ,","title":"enable_global_user_palettes"},{"location":"settings/palettes/#enable_favorite_palette","text":"Enables showing the Favorites palette (found in Packages/User/color_helper.palettes ) in the Palette Panel . // Enable storing favorite colors to the favorite palette \"enable_favorite_palette\" : true ,","title":"enable_favorite_palette"},{"location":"settings/palettes/#enable_project_user_palettes","text":"Enables showing and storing of user palettes in the project file. Project palettes will be shown in the Palette Panel . // Enable project palettes in palette panel (Palettes stored in project file). \"enable_project_user_palettes\" : true","title":"enable_project_user_palettes"},{"location":"settings/previews/","text":"Previews inline_previews Enable/disable inline color previews. inline_previews generates an image previews after the identified color in your source file. You can click the preview to bring up the ColorHelper panel. inline_preview_position Previews can be positioned to the left or right of a color. Set this value to \"left\" or \"right to toggle its behavior. // Adjust the position of inline image previews. // (left|right) \"inline_preview_position\" : \"left\" , preview_on_select Enables/disables previews only showing when they are selected. // Only show color previews next to a color when the color region // intersects the current selection(s). If a selection is empty // (just a caret), if the caret is at the start or within the color // region, a preview will also show. \"preview_on_select\" : false , show_out_of_gamut_preview Controls whether previews will attempt to gamut map a color that is out of the preview gamut. // Controls whether previews will try to visually show an out of gamut // color by using gamut mapping. \"show_out_of_gamut_preview\" : true , gamut_space Experimental Feature New in 3.8.0 Select the gamut space used for color previews. You should only pick a space that matches your system. If you happen to have a display that does not align with one of the spaces below, you may just have to pick whatever is closest. Preview accuracy is based on how precise Sublime is able to render colors and how close one of these profiles aligns to your display and it's currently configured profile. If at one time, Sublime actually manages colors, this may or may not be required, or may change in functionality. If your display supports Display P3, but is configured with a profile for sRGB, then you should not touch the below setting. // The gamut space to render previews in. // Supported spaces are: `srgb`, `display-p3`, `rec2020`, // `a98-rgb`, and `prophoto-rgb`. // If your display does not run with one of these gamuts, // You should not change this. \"gamut_space\" : \"srgb\" ,","title":"Previews"},{"location":"settings/previews/#previews","text":"","title":"Previews"},{"location":"settings/previews/#inline_previews","text":"Enable/disable inline color previews. inline_previews generates an image previews after the identified color in your source file. You can click the preview to bring up the ColorHelper panel.","title":"inline_previews"},{"location":"settings/previews/#inline_preview_position","text":"Previews can be positioned to the left or right of a color. Set this value to \"left\" or \"right to toggle its behavior. // Adjust the position of inline image previews. // (left|right) \"inline_preview_position\" : \"left\" ,","title":"inline_preview_position"},{"location":"settings/previews/#preview_on_select","text":"Enables/disables previews only showing when they are selected. // Only show color previews next to a color when the color region // intersects the current selection(s). If a selection is empty // (just a caret), if the caret is at the start or within the color // region, a preview will also show. \"preview_on_select\" : false ,","title":"preview_on_select"},{"location":"settings/previews/#show_out_of_gamut_preview","text":"Controls whether previews will attempt to gamut map a color that is out of the preview gamut. // Controls whether previews will try to visually show an out of gamut // color by using gamut mapping. \"show_out_of_gamut_preview\" : true ,","title":"show_out_of_gamut_preview"},{"location":"settings/previews/#gamut_space","text":"Experimental Feature New in 3.8.0 Select the gamut space used for color previews. You should only pick a space that matches your system. If you happen to have a display that does not align with one of the spaces below, you may just have to pick whatever is closest. Preview accuracy is based on how precise Sublime is able to render colors and how close one of these profiles aligns to your display and it's currently configured profile. If at one time, Sublime actually manages colors, this may or may not be required, or may change in functionality. If your display supports Display P3, but is configured with a profile for sRGB, then you should not touch the below setting. // The gamut space to render previews in. // Supported spaces are: `srgb`, `display-p3`, `rec2020`, // `a98-rgb`, and `prophoto-rgb`. // If your display does not run with one of these gamuts, // You should not change this. \"gamut_space\" : \"srgb\" ,","title":"gamut_space"},{"location":"settings/rules/","text":"Configuring ColorHelper color_rules The color_rules option configures how ColorHelper interacts with a given file. In order for ColorHelper to inject color previews, translate colors, and various other tasks, it needs context, and rules provide that context. \"color_rules\" : [ { \"name\" : \"HTML/CSS\" , \"base_scopes\" : [ \"source.css\" , \"text.html\" ], \"color_class\" : \"css-level-4\" , \"scanning\" : [ // https://packagecontrol.io/packages/CSS3 \"meta.declaration-list.css -support.type.property-name.css -comment -string\" , // CSS, CSS in HTML etc. (based on: Sublime Default) \"meta.property-value.css -comment -string\" , // CSS3, CSS3 in HTML etc. (based on: https://packagecontrol.io/packages/CSS3) \"meta.value.css -comment -string\" , // HTML attributes (based on: Sublime Default) \"meta.tag.inline.any.html string.quoted -constant.character.entity.html\" , \"meta.tag.any.html meta.attribute-with-value.style.html\" ] } ] A rule will define what kind of colors ColorHelper should look for, and where in the file valid colors are found. color_rules is a list of rule sets, where each rule is a dictionary of options. Only one rule set can apply to a given view at a time. Tip New rules and rule overrides should be added to user_color_rules instead of modifying color_rules directly. name Optional name. If a user creates a rule in user_color_rules , and it it shares the same name as a rule under color_rules , a shallow merge of the two rules will be made which will allow the user rule to override the values of top level keys. \"name\" : \"HTML/CSS\" , syntax_files Target a view using a syntax file from the given list. Defaults to an empty list. When specifying syntax files, you would use full path relative to Packages . The extension should be omitted. \"syntax_files\" : [ \"PackageDev/Package/Sublime Text Color Scheme/Sublime Text Color Scheme\" , \"PackageDev/Package/Sublime Text Theme/Sublime Text Theme\" ], syntax_filter Specify whether syntax_files is an allowlist or blocklist . Default's to allowlist . \"syntax_filter\" : \"allowlist\" , base_scopes Target a view whose base scope matches something from the list of scopes. Defaults to an empty list. \"base_scopes\" : [ \"source.css\" , \"text.html\" ], extensions Target a view with an extension from the provided list. Defaults to an empty list. \"extensions\" : [ \".tmTheme\" ], color_class A string defining the name of a color class to use for the scopes within the current view. Color class name should be defined in color_classes . \"color_class\" : \"css-level-4\" , If needed, you can define multiple color classes with a list of dictionaries. Each dictionary in the list should contain a class and scopes : scopes : A string that defines a base scope that the color class applies to. class : The name of the color class profile to use (defined in color_classes ). \"color_class\" : [ { \"class\" : \"css-level-4\" , \"scopes\" : \"-comment -string\" }, // etc. ] scanning Scanning will only find colors within certain scopes in a file. This is to help avoid generating previews in areas of a document that are undesirable. Often used to avoid generating previews in comments etc. This option is a list containing scopes that should be scanned for colors. \"scanning\" : true , color_trigger It is slow to iterate an entire buffer directly with the color class to match colors, so do a quick search for tokens that should trigger a color check. That way we only test in places where we think we might have a valid color. For instance, the color class can translate colors in the form rgb(1 1 1 / 1) , so we can specify rgb( as a color trigger. If we find rgb( , we will test that spot's scope and attempt to read in a color at that location. Defaults to: \"(?i)(?:\\b(?<![-#&])(?:color|hsla?|lch|lab|hwb|rgba?)\\(|\\b(?<![-#&])[\\w]{3,}(?!\\()\\b|(?<![&])#)\" \"color_trigger\" : \"(?i)(?:\\\\b(?<![-#&])[\\\\w]{3,}(?!\\\\()\\\\b|(?!<&)\\\\#)\" , allow_scanning This is an easy way to disable just scanning within a certain rule set. Defaults to true . \"allow_scanning\" : true , enable This can be used to disable a color rule set entirely. Defaults to true . \"enable\" : true , user_color_rules Follows the same format as color_rules , but is made so users can append to existing color rules. If a name is specified, and it matches a rule name in the default color_rules , the top level key values in the user rule will override the values in the default rules. // User rules. These will be appended to the normal `color_rules` unless they // share the same name. In that case, a shallow merge will be performed allowing // the values of top level keys to be overridden and new keys to be added. \"user_color_rules\" : [], generic This defines a generic fallback rule for files that don't match anything in color_rules . This allows color tools to work anywhere by providing them with sane defaults. By default, scanning is not enabled in files with generic rules, but you can enable it if you wish. Generally, generic accepts all rules that can be applied to color_rules except rules that filter out specific views such as: sytnax_files , syntax_filter , base_scopes , and extensions . Additionally, color_class only accepts a string defining a single color class. It will not accept multiple color classes. \"generic\" : { \"allow_scanning\" : false , \"scanning\" : [ \"-comment -string\" ], \"color_class\" : \"css-level-4\" }, color_classes ColorHelper uses the Color class from the coloraide dependency to manage, manipulate, and translate colors. By default, these color classes accept inputs that match valid CSS. They also output colors in the form of valid CSS. It may be desirable to filter out certain color spaces, or even alter a color space to accept different input formats and generate different output formats. This can all be done by subclassing the Color class. color_classes allows you to configure the Color class, or point to a custom Color class and configure it. color_classes is a dictionary of color profiles that link to a specific Color class. You can tweak options specifically related to the Color class. The key is the name of the color profile which can be referenced by color_rules . The value is a dictionary of options. output This can be used to specify the output options available when converting a color or inserting a color from the color picker or other tools. Specify the color space from the Color class to use, and the options to supply to the Color class' to_string method. Defaults to: [ { \"space\" : \"srgb\" , \"format\" : { \"hex\" : True }}, { \"space\" : \"srgb\" , \"format\" : { \"comma\" : True , \"precision\" : 3 }}, { \"space\" : \"hsl\" , \"format\" : { \"comma\" : True , \"precision\" : 3 }}, { \"space\" : \"hwb\" , \"format\" : { \"comma\" : False , \"precision\" : 3 }}, { \"space\" : \"lch\" , \"format\" : { \"comma\" : False , \"precision\" : 3 }}, { \"space\" : \"lab\" , \"format\" : { \"comma\" : False , \"precision\" : 3 }}, { \"space\" : \"xyz\" , \"format\" : {}} ] To learn more about available options, see coloraide 's documentation . class This allows a user to specify a custom color class derived from coloraide.Color . This could be used to reference a custom color class that can recognize different formats when scanning for colors. A custom color class will often also provide different string outputs and string output options. The value should be the full import path for the Color class. ColorHelper provides a few custom color classes in ColorHelper.custom . You can check out those to see how to create your own. \"class\" : \"ColorHelper.custom.tmtheme.ColorSRGBX11\" , filters A list that restricts color recognition to only the specified color spaces. Default is an empty list which allows all color spaces. Allowed color spaces are srgb , hsl , hwb , hsv , lch , lab , xyz , display-p3 , rec2020 , a98-rgb , and prophoto-rgb . \"filters\" : [ \"srgb\" , \"hsl\" ], edit_mode Optional parameter that controls the \"edit\" tool that is used in the info panel when you click the large color preview. The default value is default , but can also be be set to st-colormod to use an edit mode that mimics Sublimes color-mod implementation. This was mainly added so users could specify st-colormod when using a compatible color profile for color schemes and themes. \"edit_mode\" : \"st-colormod\" , user_color_classes Follows the same format as color_classes , but is made so users can append to existing color classes. If a name is specified, and it matches a entry's name in the default color_classes , the top level key values in the user color class will override the values in the default color class. // User color classes. These will be added to the normal `color_classes` unless they // share the same name with an existing entry. In that case, a shallow merge will be performed allowing // the values of top level keys to be overridden and new keys to be added. \"user_color_classes\" : {}","title":"Rules"},{"location":"settings/rules/#configuring-colorhelper","text":"","title":"Configuring ColorHelper"},{"location":"settings/rules/#color_rules","text":"The color_rules option configures how ColorHelper interacts with a given file. In order for ColorHelper to inject color previews, translate colors, and various other tasks, it needs context, and rules provide that context. \"color_rules\" : [ { \"name\" : \"HTML/CSS\" , \"base_scopes\" : [ \"source.css\" , \"text.html\" ], \"color_class\" : \"css-level-4\" , \"scanning\" : [ // https://packagecontrol.io/packages/CSS3 \"meta.declaration-list.css -support.type.property-name.css -comment -string\" , // CSS, CSS in HTML etc. (based on: Sublime Default) \"meta.property-value.css -comment -string\" , // CSS3, CSS3 in HTML etc. (based on: https://packagecontrol.io/packages/CSS3) \"meta.value.css -comment -string\" , // HTML attributes (based on: Sublime Default) \"meta.tag.inline.any.html string.quoted -constant.character.entity.html\" , \"meta.tag.any.html meta.attribute-with-value.style.html\" ] } ] A rule will define what kind of colors ColorHelper should look for, and where in the file valid colors are found. color_rules is a list of rule sets, where each rule is a dictionary of options. Only one rule set can apply to a given view at a time. Tip New rules and rule overrides should be added to user_color_rules instead of modifying color_rules directly.","title":"color_rules"},{"location":"settings/rules/#name","text":"Optional name. If a user creates a rule in user_color_rules , and it it shares the same name as a rule under color_rules , a shallow merge of the two rules will be made which will allow the user rule to override the values of top level keys. \"name\" : \"HTML/CSS\" ,","title":"name"},{"location":"settings/rules/#syntax_files","text":"Target a view using a syntax file from the given list. Defaults to an empty list. When specifying syntax files, you would use full path relative to Packages . The extension should be omitted. \"syntax_files\" : [ \"PackageDev/Package/Sublime Text Color Scheme/Sublime Text Color Scheme\" , \"PackageDev/Package/Sublime Text Theme/Sublime Text Theme\" ],","title":"syntax_files"},{"location":"settings/rules/#syntax_filter","text":"Specify whether syntax_files is an allowlist or blocklist . Default's to allowlist . \"syntax_filter\" : \"allowlist\" ,","title":"syntax_filter"},{"location":"settings/rules/#base_scopes","text":"Target a view whose base scope matches something from the list of scopes. Defaults to an empty list. \"base_scopes\" : [ \"source.css\" , \"text.html\" ],","title":"base_scopes"},{"location":"settings/rules/#extensions","text":"Target a view with an extension from the provided list. Defaults to an empty list. \"extensions\" : [ \".tmTheme\" ],","title":"extensions"},{"location":"settings/rules/#color_class","text":"A string defining the name of a color class to use for the scopes within the current view. Color class name should be defined in color_classes . \"color_class\" : \"css-level-4\" , If needed, you can define multiple color classes with a list of dictionaries. Each dictionary in the list should contain a class and scopes : scopes : A string that defines a base scope that the color class applies to. class : The name of the color class profile to use (defined in color_classes ). \"color_class\" : [ { \"class\" : \"css-level-4\" , \"scopes\" : \"-comment -string\" }, // etc. ]","title":"color_class"},{"location":"settings/rules/#scanning","text":"Scanning will only find colors within certain scopes in a file. This is to help avoid generating previews in areas of a document that are undesirable. Often used to avoid generating previews in comments etc. This option is a list containing scopes that should be scanned for colors. \"scanning\" : true ,","title":"scanning"},{"location":"settings/rules/#color_trigger","text":"It is slow to iterate an entire buffer directly with the color class to match colors, so do a quick search for tokens that should trigger a color check. That way we only test in places where we think we might have a valid color. For instance, the color class can translate colors in the form rgb(1 1 1 / 1) , so we can specify rgb( as a color trigger. If we find rgb( , we will test that spot's scope and attempt to read in a color at that location. Defaults to: \"(?i)(?:\\b(?<![-#&])(?:color|hsla?|lch|lab|hwb|rgba?)\\(|\\b(?<![-#&])[\\w]{3,}(?!\\()\\b|(?<![&])#)\" \"color_trigger\" : \"(?i)(?:\\\\b(?<![-#&])[\\\\w]{3,}(?!\\\\()\\\\b|(?!<&)\\\\#)\" ,","title":"color_trigger"},{"location":"settings/rules/#allow_scanning","text":"This is an easy way to disable just scanning within a certain rule set. Defaults to true . \"allow_scanning\" : true ,","title":"allow_scanning"},{"location":"settings/rules/#enable","text":"This can be used to disable a color rule set entirely. Defaults to true . \"enable\" : true ,","title":"enable"},{"location":"settings/rules/#user_color_rules","text":"Follows the same format as color_rules , but is made so users can append to existing color rules. If a name is specified, and it matches a rule name in the default color_rules , the top level key values in the user rule will override the values in the default rules. // User rules. These will be appended to the normal `color_rules` unless they // share the same name. In that case, a shallow merge will be performed allowing // the values of top level keys to be overridden and new keys to be added. \"user_color_rules\" : [],","title":"user_color_rules"},{"location":"settings/rules/#generic","text":"This defines a generic fallback rule for files that don't match anything in color_rules . This allows color tools to work anywhere by providing them with sane defaults. By default, scanning is not enabled in files with generic rules, but you can enable it if you wish. Generally, generic accepts all rules that can be applied to color_rules except rules that filter out specific views such as: sytnax_files , syntax_filter , base_scopes , and extensions . Additionally, color_class only accepts a string defining a single color class. It will not accept multiple color classes. \"generic\" : { \"allow_scanning\" : false , \"scanning\" : [ \"-comment -string\" ], \"color_class\" : \"css-level-4\" },","title":"generic"},{"location":"settings/rules/#color_classes","text":"ColorHelper uses the Color class from the coloraide dependency to manage, manipulate, and translate colors. By default, these color classes accept inputs that match valid CSS. They also output colors in the form of valid CSS. It may be desirable to filter out certain color spaces, or even alter a color space to accept different input formats and generate different output formats. This can all be done by subclassing the Color class. color_classes allows you to configure the Color class, or point to a custom Color class and configure it. color_classes is a dictionary of color profiles that link to a specific Color class. You can tweak options specifically related to the Color class. The key is the name of the color profile which can be referenced by color_rules . The value is a dictionary of options.","title":"color_classes"},{"location":"settings/rules/#output","text":"This can be used to specify the output options available when converting a color or inserting a color from the color picker or other tools. Specify the color space from the Color class to use, and the options to supply to the Color class' to_string method. Defaults to: [ { \"space\" : \"srgb\" , \"format\" : { \"hex\" : True }}, { \"space\" : \"srgb\" , \"format\" : { \"comma\" : True , \"precision\" : 3 }}, { \"space\" : \"hsl\" , \"format\" : { \"comma\" : True , \"precision\" : 3 }}, { \"space\" : \"hwb\" , \"format\" : { \"comma\" : False , \"precision\" : 3 }}, { \"space\" : \"lch\" , \"format\" : { \"comma\" : False , \"precision\" : 3 }}, { \"space\" : \"lab\" , \"format\" : { \"comma\" : False , \"precision\" : 3 }}, { \"space\" : \"xyz\" , \"format\" : {}} ] To learn more about available options, see coloraide 's documentation .","title":"output"},{"location":"settings/rules/#class","text":"This allows a user to specify a custom color class derived from coloraide.Color . This could be used to reference a custom color class that can recognize different formats when scanning for colors. A custom color class will often also provide different string outputs and string output options. The value should be the full import path for the Color class. ColorHelper provides a few custom color classes in ColorHelper.custom . You can check out those to see how to create your own. \"class\" : \"ColorHelper.custom.tmtheme.ColorSRGBX11\" ,","title":"class"},{"location":"settings/rules/#filters","text":"A list that restricts color recognition to only the specified color spaces. Default is an empty list which allows all color spaces. Allowed color spaces are srgb , hsl , hwb , hsv , lch , lab , xyz , display-p3 , rec2020 , a98-rgb , and prophoto-rgb . \"filters\" : [ \"srgb\" , \"hsl\" ],","title":"filters"},{"location":"settings/rules/#edit_mode","text":"Optional parameter that controls the \"edit\" tool that is used in the info panel when you click the large color preview. The default value is default , but can also be be set to st-colormod to use an edit mode that mimics Sublimes color-mod implementation. This was mainly added so users could specify st-colormod when using a compatible color profile for color schemes and themes. \"edit_mode\" : \"st-colormod\" ,","title":"edit_mode"},{"location":"settings/rules/#user_color_classes","text":"Follows the same format as color_classes , but is made so users can append to existing color classes. If a name is specified, and it matches a entry's name in the default color_classes , the top level key values in the user color class will override the values in the default color class. // User color classes. These will be added to the normal `color_classes` unless they // share the same name with an existing entry. In that case, a shallow merge will be performed allowing // the values of top level keys to be overridden and new keys to be added. \"user_color_classes\" : {}","title":"user_color_classes"},{"location":"settings/tools/","text":"Tools click_color_box_to_pick This will make the color preview box in the Color Info Panel clickable. When the preview box is clicked, it will open the specified tool. // Color picker and palette picker by default // are accessed by clicking an icon on the color info panel. // Click access for one of these can be moved to the color box // (visual representation of the color). // (none|color_picker|palette_picker|edit) \"click_color_box_to_pick\" : \"none\" ,","title":"Tools"},{"location":"settings/tools/#tools","text":"","title":"Tools"},{"location":"settings/tools/#click_color_box_to_pick","text":"This will make the color preview box in the Color Info Panel clickable. When the preview box is clicked, it will open the specified tool. // Color picker and palette picker by default // are accessed by clicking an icon on the color info panel. // Click access for one of these can be moved to the color box // (visual representation of the color). // (none|color_picker|palette_picker|edit) \"click_color_box_to_pick\" : \"none\" ,","title":"click_color_box_to_pick"}]}