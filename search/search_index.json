{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Markdown Popups ColorHelper ColorHelper makes work with colors easier by providing inline color previews in your documents (ST3 build 3118+) and offers tooltips with color previews of stylesheet colors, provides color translation, and allows the storing and accessing of favorite colors in color palettes. Most features are optionally configurable. For the most part, these tooltips should show any time the cursor is in a CSS, SCSS, or SASS color. It should also appear when in HTML style attributes. Features Inline color previews. Useful tooltip popups that show the previews of selected colors. Support colors in CSS, SCSS, SASS, and HTML attributes. Show all the colors in a file in a special color palette in the tooltip. Allow saving, accessing, and managing colors in named color palettes all from the tooltip. Select and insert colors from the color palettes via the tooltip. Translate an existing color form to a new form the tooltip. Supports rgb , rgba , hex , hexa , hsl , hsla , gray , hwb , and colors names. Can optionally treat hexa format #RRGGBBAA as #AARRGGBB .","title":"About Markdown Popups"},{"location":"#about-markdown-popups","text":"","title":"About Markdown Popups"},{"location":"#colorhelper","text":"ColorHelper makes work with colors easier by providing inline color previews in your documents (ST3 build 3118+) and offers tooltips with color previews of stylesheet colors, provides color translation, and allows the storing and accessing of favorite colors in color palettes. Most features are optionally configurable. For the most part, these tooltips should show any time the cursor is in a CSS, SCSS, or SASS color. It should also appear when in HTML style attributes.","title":"ColorHelper"},{"location":"#features","text":"Inline color previews. Useful tooltip popups that show the previews of selected colors. Support colors in CSS, SCSS, SASS, and HTML attributes. Show all the colors in a file in a special color palette in the tooltip. Allow saving, accessing, and managing colors in named color palettes all from the tooltip. Select and insert colors from the color palettes via the tooltip. Translate an existing color form to a new form the tooltip. Supports rgb , rgba , hex , hexa , hsl , hsla , gray , hwb , and colors names. Can optionally treat hexa format #RRGGBBAA as #AARRGGBB .","title":"Features"},{"location":"installation/","text":"Installation Package Control The recommended way to install ColorHelper is via Package Control . Package Control will install the correct branch on your system and keep it up to date. Ensure Package Control is installed. Instructions are found here . In Sublime Text, press ctrl + shift + p (Win, Linux) or cmd + shift + p (Mac OS) to bring up the quick panel and start typing Package Control: Install Package . Select the command and it will show a list of installable plugins. Start typing ColorHelper ; when you see it, select it. Restart to be sure everything is loaded proper. Enjoy! Manual Installation Warning This is not the recommended way to install ColorHelper for the average user. Installing this way will not get automatically updated. If you are forking for a pull request, you should just clone ColorHelper and run Package Control's Satisfy Dependency command to get all the dependencies. For those who want to install ColorHelper without package control, here are the steps. It understood that some people for what ever reason will prefer manually and may even have legitimate reasons to do so. When going this route, you will have to keep all the packages updated yourself. Download the latest releases of the following dependencies and unpack or git clone in the Packages folder as shown below: teddy_beer_maniac/sublime-text-dependency-markupsafe -> markupsafe teddy_beer_maniac/sublime-text-dependency-jinja2 -> python-jinja2 packagecontrol/pygments -> pygments facelessuser/sublime-markdown-popups -> mdpopups facelessuser/sublime-markdown -> python-markdown Download and unpack or git clone the latest ColorHelper release and unpack as ColorHelper : facelessuser/ColorHelper -> ColorHelper Create a folder under Packages called 00-dependencies and under that folder create a file called 00-dependencies.py : Copy the following code to 00-dependencies.py (this code was taken from Package Control): import sys import os from os.path import dirname if os . name == 'nt' : from ctypes import windll , create_unicode_buffer import sublime if sys . version_info >= ( 3 ,): def decode ( path ): return path def encode ( path ): return path if os . path . basename ( __file__ ) == 'sys_path.py' : pc_package_path = dirname ( dirname ( __file__ )) # When loaded as a .sublime-package file, the filename ends up being # Package Control.sublime-package/Package Control.package_control.sys_path else : pc_package_path = dirname ( __file__ ) st_version = u '3' else : def decode ( path ): if not isinstance ( path , unicode ): path = path . decode ( sys . getfilesystemencoding ()) return path def encode ( path ): if isinstance ( path , unicode ): path = path . encode ( sys . getfilesystemencoding ()) return path pc_package_path = decode ( os . getcwd ()) st_version = u '2' st_dir = dirname ( dirname ( pc_package_path )) def add ( path , first = False ): \"\"\" Adds an entry to the beginning of sys.path, working around the fact that Python 2.6 can't import from non-ASCII paths on Windows. :param path: A unicode string of a folder, zip file or sublime-package file to add to the path :param first: If the path should be added at the beginning \"\"\" if os . name == 'nt' : # Work around unicode path import issue on Windows with Python 2.6 buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value enc_path = encode ( path ) if os . path . exists ( enc_path ): if first : try : sys . path . remove ( enc_path ) except ( ValueError ): pass sys . path . insert ( 0 , enc_path ) elif enc_path not in sys . path : sys . path . append ( enc_path ) def remove ( path ): \"\"\" Removes a path from sys.path if it is present :param path: A unicode string of a folder, zip file or sublime-package file \"\"\" try : sys . path . remove ( encode ( path )) except ( ValueError ): pass if os . name == 'nt' : buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value try : sys . path . remove ( encode ( path )) except ( ValueError ): pass def generate_dependency_paths ( name ): \"\"\" Accepts a dependency name and generates a dict containing the three standard import paths that are valid for the current machine. :param name: A unicode string name of the dependency :return: A dict with the following keys: - 'ver' - 'plat' - 'arch' \"\"\" packages_dir = os . path . join ( st_dir , u 'Packages' ) dependency_dir = os . path . join ( packages_dir , name ) ver = u 'st %s ' % st_version plat = sublime . platform () arch = sublime . arch () return { 'all' : os . path . join ( dependency_dir , 'all' ), 'ver' : os . path . join ( dependency_dir , ver ), 'plat' : os . path . join ( dependency_dir , u ' %s _ %s ' % ( ver , plat )), 'arch' : os . path . join ( dependency_dir , u ' %s _ %s _ %s ' % ( ver , plat , arch )) } def add_dependency ( name , first = False ): \"\"\" Accepts a dependency name and automatically adds the appropriate path to sys.path, if the dependency has a path for the current platform and architecture. :param name: A unicode string name of the dependency :param first: If the path should be added to the beginning of the list \"\"\" dep_paths = generate_dependency_paths ( name ) for path in dep_paths . values (): if os . path . exists ( encode ( path )): add ( path , first = first ) add_dependency ( 'pygments' ) add_dependency ( 'markupsafe' ) add_dependency ( 'python-markdown' ) add_dependency ( 'python-jinja2' ) add_dependency ( 'mdpopups' ) Restart and enjoy. Git Cloning Quit Sublime Text. Open a terminal and enter the following. For dependencies replace the URL with the appropriate URL, and the appropriate folder to check it out to: cd /path/to/Sublime Text 3/Packages git clone https://github.com/facelessuser/ColorHelper.git ColorHelper Restart Sublime Text.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#package-control","text":"The recommended way to install ColorHelper is via Package Control . Package Control will install the correct branch on your system and keep it up to date. Ensure Package Control is installed. Instructions are found here . In Sublime Text, press ctrl + shift + p (Win, Linux) or cmd + shift + p (Mac OS) to bring up the quick panel and start typing Package Control: Install Package . Select the command and it will show a list of installable plugins. Start typing ColorHelper ; when you see it, select it. Restart to be sure everything is loaded proper. Enjoy!","title":"Package Control"},{"location":"installation/#manual-installation","text":"Warning This is not the recommended way to install ColorHelper for the average user. Installing this way will not get automatically updated. If you are forking for a pull request, you should just clone ColorHelper and run Package Control's Satisfy Dependency command to get all the dependencies. For those who want to install ColorHelper without package control, here are the steps. It understood that some people for what ever reason will prefer manually and may even have legitimate reasons to do so. When going this route, you will have to keep all the packages updated yourself. Download the latest releases of the following dependencies and unpack or git clone in the Packages folder as shown below: teddy_beer_maniac/sublime-text-dependency-markupsafe -> markupsafe teddy_beer_maniac/sublime-text-dependency-jinja2 -> python-jinja2 packagecontrol/pygments -> pygments facelessuser/sublime-markdown-popups -> mdpopups facelessuser/sublime-markdown -> python-markdown Download and unpack or git clone the latest ColorHelper release and unpack as ColorHelper : facelessuser/ColorHelper -> ColorHelper Create a folder under Packages called 00-dependencies and under that folder create a file called 00-dependencies.py : Copy the following code to 00-dependencies.py (this code was taken from Package Control): import sys import os from os.path import dirname if os . name == 'nt' : from ctypes import windll , create_unicode_buffer import sublime if sys . version_info >= ( 3 ,): def decode ( path ): return path def encode ( path ): return path if os . path . basename ( __file__ ) == 'sys_path.py' : pc_package_path = dirname ( dirname ( __file__ )) # When loaded as a .sublime-package file, the filename ends up being # Package Control.sublime-package/Package Control.package_control.sys_path else : pc_package_path = dirname ( __file__ ) st_version = u '3' else : def decode ( path ): if not isinstance ( path , unicode ): path = path . decode ( sys . getfilesystemencoding ()) return path def encode ( path ): if isinstance ( path , unicode ): path = path . encode ( sys . getfilesystemencoding ()) return path pc_package_path = decode ( os . getcwd ()) st_version = u '2' st_dir = dirname ( dirname ( pc_package_path )) def add ( path , first = False ): \"\"\" Adds an entry to the beginning of sys.path, working around the fact that Python 2.6 can't import from non-ASCII paths on Windows. :param path: A unicode string of a folder, zip file or sublime-package file to add to the path :param first: If the path should be added at the beginning \"\"\" if os . name == 'nt' : # Work around unicode path import issue on Windows with Python 2.6 buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value enc_path = encode ( path ) if os . path . exists ( enc_path ): if first : try : sys . path . remove ( enc_path ) except ( ValueError ): pass sys . path . insert ( 0 , enc_path ) elif enc_path not in sys . path : sys . path . append ( enc_path ) def remove ( path ): \"\"\" Removes a path from sys.path if it is present :param path: A unicode string of a folder, zip file or sublime-package file \"\"\" try : sys . path . remove ( encode ( path )) except ( ValueError ): pass if os . name == 'nt' : buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value try : sys . path . remove ( encode ( path )) except ( ValueError ): pass def generate_dependency_paths ( name ): \"\"\" Accepts a dependency name and generates a dict containing the three standard import paths that are valid for the current machine. :param name: A unicode string name of the dependency :return: A dict with the following keys: - 'ver' - 'plat' - 'arch' \"\"\" packages_dir = os . path . join ( st_dir , u 'Packages' ) dependency_dir = os . path . join ( packages_dir , name ) ver = u 'st %s ' % st_version plat = sublime . platform () arch = sublime . arch () return { 'all' : os . path . join ( dependency_dir , 'all' ), 'ver' : os . path . join ( dependency_dir , ver ), 'plat' : os . path . join ( dependency_dir , u ' %s _ %s ' % ( ver , plat )), 'arch' : os . path . join ( dependency_dir , u ' %s _ %s _ %s ' % ( ver , plat , arch )) } def add_dependency ( name , first = False ): \"\"\" Accepts a dependency name and automatically adds the appropriate path to sys.path, if the dependency has a path for the current platform and architecture. :param name: A unicode string name of the dependency :param first: If the path should be added to the beginning of the list \"\"\" dep_paths = generate_dependency_paths ( name ) for path in dep_paths . values (): if os . path . exists ( encode ( path )): add ( path , first = first ) add_dependency ( 'pygments' ) add_dependency ( 'markupsafe' ) add_dependency ( 'python-markdown' ) add_dependency ( 'python-jinja2' ) add_dependency ( 'mdpopups' ) Restart and enjoy.","title":"Manual Installation"},{"location":"installation/#git-cloning","text":"Quit Sublime Text. Open a terminal and enter the following. For dependencies replace the URL with the appropriate URL, and the appropriate folder to check it out to: cd /path/to/Sublime Text 3/Packages git clone https://github.com/facelessuser/ColorHelper.git ColorHelper Restart Sublime Text.","title":"Git Cloning"},{"location":"usage/","text":"User Guide Overview ColorHelper is a CSS/SCSS/Sass tooltip. When the cursor is on a CSS color, the tooltip will appear. When entering a color into a supported file, the color palette panel will be triggered so you can optionally insert a color from a saved palette. The panel will popup after either: # , rgb( , rgba( , hsl( or hsla( . Note Popups are provided by the mdpopups dependency. Color Info The Color Info Panel will show a preview of the color, and other format variations of the color such as: color name, hex , rgb , rgba , hsl , and hsla format; if desired, you can convert the selected color to one of the shown formats by clicking the link to the left. From the color info panel, you can launch a color picker, bookmark colors as a favorite, add/save the current color to a palette of your choice, or open the Palette Panel to select a pre-saved color from an existing palette. Color Picker The internal color picker can be launched from the view's context menu, the command palette, or from the Color Info Panel . When launched it will use the color under the cursor (if available) as its starting color. The internal color picker is contained inside a tooltip. It has a color map section at the top where different colors can be selected. It shows various valid CSS formats of the colors at the bottom. And it shows either rgba channels or hlsa channels; a toggle is available to switch between them. The color channels are coarse, but can generally allow you to get close to a color that you like. As you select colors in the channel the selections will shift revealing more selections until the bounds of the color channel are reached. If you need finer selections, you can click the label to the left and scrollable tooltip with much finer selections will appear so that you can select the best suited value. If you would like to pick from a list of CSS color names, you can select the CSS color names link and a CSS Color Names panel will open: If you would like to directly enter a different color, you can select the enter new color option. An input panel will be open that can receive a color in the hex form of #RRGGBBAA where RR is the red channel, GG is the green channel, BB is the blue channel, and AA is the alpha channel. To select a color, just click the >>> link to the right of the CSS format you want. Add Color Panel The Add Color Panel presents the user with the option of either adding a color to an existing palette or creating a new global or project palette and adding the color to it. When creating a new palette, the user will be presented with a input box to type the name of the palette to create. Palette Panel The Palette panel will allow you to view the current saved palettes: favorites, saved user palette, and saved project palettes. The Favorites palette and user palettes are found in your Packages/User/color_helper.palettes . Project palettes are stored in your actual project file; if one does not exist, it will be stored in memory. By clicking a palette, you will be taken to the Color Panel to select a color to insert into the current document. You can also access the Palette Delete Panel directly. Palette Delete Panel The Palette Delete Panel allows a user to delete an existing palette. The only palettes that cannot be deleted is the Favorites palette and the Current Colors palette (if enabled). To delete a palette, a user simply clicks a palette and it will be removed. Color Panel The Color Panel allows you to click a color to insert it at your current color position. You can also bring up the Color Delete Panel from the view's context menu or the command palette. Color Delete Panel The Color Delete Panel can delete any color from the given palette. A user simply clicks the color to remove, and it will be removed. Settings Settings for Color Helper are contained within the ColorHelper.sublime-settings file. auto_popup Enable/disable auto popups. // Show popups automatically in configured files. \"auto_popup\" : true , inline_previews Enable/disable inline color previews. inline_previews generates an image previews after the identified color in your source file. You can click the preview to bring up the ColorHelper panel. inline_preview_offset ColorHelper does it best to calculate the correct size for inline images, but with some font's or screen resolutions (or for a reason I don't quite understand) it will get it wrong and create an image larger (or maybe smaller) than your line height which may cause an undesirable look. Set this value to either a positive or negative value which will be applied to the inline preview's image size. // Adjust the size of inline image previews by the offset given. // Please use either a positive or negative number. \"inline_preview_offset\" : 0 , If you need to set this per OS or per host, you can via multiconf . inline_preview_position Previews can be positioned to the left or right of a color. Set this value to \"left\" or \"right to toggle its behavior. // Adjust the position of inline image previews. // (left|right) \"inline_preview_position\" : \"left\" , upper_case_hex When inserting a color from the tooltip, this setting will determine if hex colors get uppercased or lowercased. // Upper case hex when inserting \"upper_case_hex\" : false , use_webcolor_names Will determine if a HTML color name will be shown for the currently selected colors. If inserting a web color name, transparency will be removed. // Use webcolor names when value color matches a webcolor name. \"use_webcolor_names\" : true , click_color_box_to_pick This will make the color preview box in the Color Info Panel clickable. When set to color_picker and clicked, it will open the color picker via the ColorPicker plugin (if installed). When set to palette_picker and clicked, it will open the Palette Panel . The respective menu item will not be shown in the Color Info Panel once relocated to the color preview. // Color picker and palette picker by default // are accessed by clicking an icon on the color info panel. // Click access for one of thesecan be moved to the color box // (visual representation of the color). // (none|color_picker|palette_picker) \"click_color_box_to_pick\" : \"none\" , graphic_size Coarse scaling of the size of generated graphics. Graphics in the tooltips look best large as Sublime slightly distorts images, but on different screens, some of the tooltips (especially the internal color picker) may be too large or too small. graphic_size can be used to control the size of these generated images. Scaling is based off line height, and valid settings are small (1X), medium (1.5X), and large (2X). medium is the default. // If the color picker is too big or too small, try playing with this. // This is a coarse control which scales image size relative to the // approximate line height. small (1x), medium (1.5x), and large (2x). // (small | medium | large) \"graphic_size\" : \"medium\" , If you need to set this per OS or per host, you can via multiconf . graphic_scale Fine scaling of the size of generated graphics. This overrides graphic_size . // Fine scaling of image sizes. Overrides `graphic_size`. // Use an integer or floating point value. `null` disables fine scaling. \"graphic_scale\" : 1.5 , ```` ### `enable_color_picker` Enables the ability to launch the color picker from the tooltip . By default , the internal color picker will be used . If you have [ @ weslly ]( https : //github.com/weslly)'s [ColorPicker](https://packagecontrol.io/packages/ColorPicker) package installed, you can use [use_color_picker_package](#use_color_picker_package) to use it instead of the internal color picker. ```js // Enable color picker option. Will use native color picker // unless \"use_color_picker_package\" is enabled and external // package is installed. \"enable_color_picker\": true, use_hex_color_picker Enables or disables the use of the hex color picker. When enabled, the color picker has a hex shape as the colors fan out from the white center. If disabled, the color picker will be a rectangular one that shows the colors by hue and by brightness. // This can be turned off to get a rectangular color picker // That displays possible options by hue and brightness/luminance. \"use_hex_color_picker\" : true , Disabled look use_color_picker_package If you have @weslly 's [ColorPicker][color-picker] package installed, user_color_picker_package will cause it to override the default color picker, but only the default color picker supports transparency. // Use https://github.com/weslly/ColorPicker for the color picker if installed. \"use_color_picker_package\" : false , enable_global_user_palettes Enables showing user palettes (found in Packages/User/color_helper.palettes ) in the Palette Panel . // Show global palettes in palette panel \"enable_global_user_palettes\" : true , enable_favorite_palette Enables showing the Favorites palette (found in Packages/User/color_helper.palettes ) in the Palette Panel . // Enable storing favorite colors to the favorite palette \"enable_favorite_palette\" : true , enable_current_file_palette Enables scanning of the current active view buffer for colors and showing them in the Current Colors palette in the Palette Panel . // Enable showing current file color palette \"enable_current_file_palette\" : true , enable_project_user_palettes Enables showing and storing of user palettes in the project file. Project palettes will be shown in the Palette Panel . // Enable project palettes in palette panel (Palettes stored in project file). \"enable_project_user_palettes\" : true enable_color_conversions Enables showing the color conversion options on the Color Info Panel . // Enable color conversion options on color info panel \"enable_color_conversions\" : true , show_index_status Set whether indexing status is shown in the status bar. // Show index status in the status bar. \"show_index_status\" : true , line_height_workaround Temporary workaround for Windows 10 HiDPI setups that reduces image sizes. // For Windows 10 HiDPI setups. This is a temporary workaround // to help reduce abnormally large color previews and other images. // This will be removed once the issue is fixed in Sublime Text 3. \"line_height_workaround\" : false , image_border_color For themes with popups that have a very different background than what is found as the default code background, it may be desirable to override image borders with a color that blends better. Border cannot be applied to images with CSS, so this option was exposed to allow user override. Colors specified in the setting must be of the form #RRGGBB . null can be used to turn remove your override. // Override image border color. This is mainly for schemes that use a dramatically different // background for popups vs code background. Color should be in the form `#RRGGBB`. Alpha channels will // be ignored. \"image_border_color\" : \"##ff0000\" color_scanning Setting to control color scanning which is responsible for both auto-popups and constructing \"Current File Palette\". color_scanning is an array of rules. Each rule can target file(s) and enable certain scanning certain scopes for specific colors. Each rule is a dictionary. syntax_files , base_scopes , and extensions or used to target the a file for scanning; you can use a specific one, or multiple. \"color_scanning\" : [ { \"syntax_files\" : [], \"syntax_filter\" : \"allowlist\" , \"base_scopes\" : [ \"source.css\" , \"text.html\" ], \"scan_scopes\" : [ // CSS, CSS in HTML etc. (based on: Sublime Default) \"meta.property-value.css -comment -string\" , // CSS3, CSS3 in HTML etc. (based on: https://packagecontrol.io/packages/CSS3) \"meta.value.css -comment -string\" , // HTML attributes (based on: Sublime Default) \"meta.tag.inline.any.html string.quoted\" , \"meta.tag.any.html meta.attribute-with-value.style.html\" ], \"scan_completion_scopes\" : [], \"extensions\" : [], \"allowed_colors\" : [ \"css4\" ], \"use_hex_argb\" : false , \"compress_hex_output\" : true , \"space_separator_syntax\" : [ \"gray\" , \"hwb\" ] }, ] color_scanning.syntax_files syntax_files is an array of syntax file ( tmLanguage or sublime-syntax )names and are relative to Packages (extensions should be excluded). They are used to filter views that will be targeted for scanning. Depending on how syntax_filter is set, syntax_files will either require the files to be in the list or not in the list. If syntax_files is set as an empty array, all views will be targeted unless filtered further by other settings. Assuming that you have a tmLanguage file Packages/CSS/CSS.tmLanguage : \"color_scanning\" : [ { \"syntax_files\" : [ \"CSS/CSS\" ], color_scanning.syntax_filter syntax_filter will cause syntax_files to be treated as either a blocklist or allowlist . Acceptable values are \"blocklist\" and \"allowlist\" . \"allowlist\" is the default setting. \"color_scanning\" : [ { \"syntax_filter\" : \"allowlist\" , color_scanning.base_scopes base_scopes is used to target specific file views that are syntax highlighted with a specific base scope. This allows you to target multiple syntax highlighters that all use the same base scope. base_scopes is an array; if the array is left empty, all views will be targeted unless filtered further by other settings. \"color_scanning\" : [ { \"base_scopes\" : [ \"source.css\" ], color_scanning.extensions extensions is used to target specific file views that a file name with the specified extension(s). extensions is an array; if the array is left empty, all views will be targeted unless filtered further by other settings. For this setting to work the file usually must exist on disk as views that do not exist on text usually do not have a file name. \"color_scanning\" : [ { \"extensions\" : [ \".css\" ], color_scanning.scan_scopes scan_scopes is an array of scopes that will be searched for colors. Scopes in this array contain usually tmTheme scope syntax, so you can include scopes or exclude scopes etc. In the example below, we target meta.property-value.css , but only if it is not also scoped as a string or a comment . \"color_scanning\" : [ { \"scan_scopes\" : [ \"meta.property-value.css -comment -string\" ] color_scanning.scan_completion_scopes scan_completion_scopes is an array of scopes that will be searched for certain syntax for color completions. This is used only if scan_scopes is not sufficient to also capture colors that need to be completed. For example: sometimes scan_scopes is not broad enough to capture incomplete colors, but we don't want to generally want to scan so broadly when scanning an entire file for complete colors. Scopes in this array contain usually tmTheme scope syntax, so you can include scopes or exclude scopes etc. In the example below, we target source.scss and source.sass , but only if they are not also scoped as string or comment . \"color_scanning\" : [ { \"scan_completion_scopes\" : [ \"source.scss -comment -string\" , \"source.sass -comment -string\" ], color_scanning.allowed_colors allowed_colors defines which colors will be scanned for in a specific file. It is an array of strings where each strings specifies a color type or category of colors to scan for. Value Description webcolors CSS3 color names plus CSS4's rebeccapurple . hex Hex colors in the form of #RRGGBB . hex_compressed Hex colors in the form of #RGB . hexa Hex colors with an alpha channel in the form #RRGGBBAA or #AARRGGBB if use_hex_argb is set to true . hexa_compressed Hex colors with an alpha channel in the form #RGBA or #ARGB if use_hex_argb is set to true . rgb RGB colors in the form rgb(255, 128, 0) or rgb(100%, 50%, 0%) . rgba RGBA colors in the form rgb(255, 128, 0, .5) or rgb(100%, 50%, 0%, .5) . It also supports CSS4's alpha as a percentage format: rgb(100%, 50%, 0%, 50%) . hsl HSL colors in the form hsl(360, 100%, 50%) . hsla HSLA colors in the form hsla(360, 100%, 50%, .5) . It also supports CSS4's alpha as a percentage format: hsla(360, 100%, 50%, 50%) . gray CSS4's gray format: gray(255) or gray(100%) . graya CSS4's gray with alpha format: gray(255, .5) or gray(100%, .5) . It also supports alpha as a percentage format: gray(100%, 50%) . hwb CSS4's HWB color format: hwb(360, 50%, 100%) . hwba CSS4's HWBA color format: hwb(360, 50%, 100%, 5) or hwb(360, 50%, 100%, 50%) . css4 All CSS4 formats: webcolors , hex , hex_compressed , rgb , rgba , hsl , hsla , gray , graya , hwb , hwba , hexa , hexa_compressed . all All color formats. \"color_scanning\" : [ { \"allowed_colors\" : [ \"css3\" ] Deprecated 3.0 The key css3 has been deprecated. While it will still be accepted, it is currently an alias for css4 . color_scanning.use_hex_argb When scanning and processing hex rgb colors with alpha channels, process them as and output them with the alpha channel first opposed to at the end. By default the value is false . \"color_scanning\" : [ { \"use_hex_argb\" : true color_scanning.compress_hex_output When outputting hex formats compress the color if possible #334455 \u2192 #345 . The default is false . \"color_scanning\" : [ { \"compress_hex_output\" : true color_scanning.space_separator_syntax When representing colors in popups or inserting them, the color formats of rgb , hsl , hwb , and gray can be displayed in the traditional way or in the space separator form ( rgb(r g b / a) ). If desired, this new format can be enabled as default via the space_separator_syntax option. Most rules enable this for hwb and gray as the level 4 specifications do not allow the comma separated for for these new color formats. \"color_scanning\" : [ { \"space_separator_syntax\" : [ \"hwb\" , \"gray\" ] Multiconf Certain settings that lend them self better to be setting up per OS or per host will be configured to use multiconf . multiconf is a library that will parse a setting as a normal setting or a per OS and/or per host setting (if configured properly). For the settings that have this enabled, you can optionally use the format below to specify the setting per OS or per host. The optional multiconf format requires a dictionary with a special identifier #multiconf# and a list of dictionaries identified by a qualifier of the form \"<qualifier name>:<qualifier value>[;<qualifier name>:<qualifier value>]...\" For example, the following setting \"user_home\" : \"/home\" would result in get(\"user_home\") returning the value \"/home\" but it could also be replaced with \"user_home\" : { \"#multiconf#\" : [ { \"os:windows\" : \"C:\\\\Users\" }, { \"os:linux;host:his_pc\" : \"/home\" }, { \"os:linux;host:her_pc\" : \"/home/her/special\" } ] } Now the same configuration file will provide different values depending on the machine it's on. On an MS Windows machine the value returned by get will be \"C:\\Users\", and on a Linux machine with the host name his_pc the value will be \"/home\", etc.","title":"User Guide"},{"location":"usage/#user-guide","text":"","title":"User Guide"},{"location":"usage/#overview","text":"ColorHelper is a CSS/SCSS/Sass tooltip. When the cursor is on a CSS color, the tooltip will appear. When entering a color into a supported file, the color palette panel will be triggered so you can optionally insert a color from a saved palette. The panel will popup after either: # , rgb( , rgba( , hsl( or hsla( . Note Popups are provided by the mdpopups dependency.","title":"Overview"},{"location":"usage/#color-info","text":"The Color Info Panel will show a preview of the color, and other format variations of the color such as: color name, hex , rgb , rgba , hsl , and hsla format; if desired, you can convert the selected color to one of the shown formats by clicking the link to the left. From the color info panel, you can launch a color picker, bookmark colors as a favorite, add/save the current color to a palette of your choice, or open the Palette Panel to select a pre-saved color from an existing palette.","title":"Color Info"},{"location":"usage/#color-picker","text":"The internal color picker can be launched from the view's context menu, the command palette, or from the Color Info Panel . When launched it will use the color under the cursor (if available) as its starting color. The internal color picker is contained inside a tooltip. It has a color map section at the top where different colors can be selected. It shows various valid CSS formats of the colors at the bottom. And it shows either rgba channels or hlsa channels; a toggle is available to switch between them. The color channels are coarse, but can generally allow you to get close to a color that you like. As you select colors in the channel the selections will shift revealing more selections until the bounds of the color channel are reached. If you need finer selections, you can click the label to the left and scrollable tooltip with much finer selections will appear so that you can select the best suited value. If you would like to pick from a list of CSS color names, you can select the CSS color names link and a CSS Color Names panel will open: If you would like to directly enter a different color, you can select the enter new color option. An input panel will be open that can receive a color in the hex form of #RRGGBBAA where RR is the red channel, GG is the green channel, BB is the blue channel, and AA is the alpha channel. To select a color, just click the >>> link to the right of the CSS format you want.","title":"Color Picker"},{"location":"usage/#add-color-panel","text":"The Add Color Panel presents the user with the option of either adding a color to an existing palette or creating a new global or project palette and adding the color to it. When creating a new palette, the user will be presented with a input box to type the name of the palette to create.","title":"Add Color Panel"},{"location":"usage/#palette-panel","text":"The Palette panel will allow you to view the current saved palettes: favorites, saved user palette, and saved project palettes. The Favorites palette and user palettes are found in your Packages/User/color_helper.palettes . Project palettes are stored in your actual project file; if one does not exist, it will be stored in memory. By clicking a palette, you will be taken to the Color Panel to select a color to insert into the current document. You can also access the Palette Delete Panel directly.","title":"Palette Panel"},{"location":"usage/#palette-delete-panel","text":"The Palette Delete Panel allows a user to delete an existing palette. The only palettes that cannot be deleted is the Favorites palette and the Current Colors palette (if enabled). To delete a palette, a user simply clicks a palette and it will be removed.","title":"Palette Delete Panel"},{"location":"usage/#color-panel","text":"The Color Panel allows you to click a color to insert it at your current color position. You can also bring up the Color Delete Panel from the view's context menu or the command palette.","title":"Color Panel"},{"location":"usage/#color-delete-panel","text":"The Color Delete Panel can delete any color from the given palette. A user simply clicks the color to remove, and it will be removed.","title":"Color Delete Panel"},{"location":"usage/#settings","text":"Settings for Color Helper are contained within the ColorHelper.sublime-settings file.","title":"Settings"},{"location":"usage/#auto_popup","text":"Enable/disable auto popups. // Show popups automatically in configured files. \"auto_popup\" : true ,","title":"auto_popup"},{"location":"usage/#inline_previews","text":"Enable/disable inline color previews. inline_previews generates an image previews after the identified color in your source file. You can click the preview to bring up the ColorHelper panel.","title":"inline_previews"},{"location":"usage/#inline_preview_offset","text":"ColorHelper does it best to calculate the correct size for inline images, but with some font's or screen resolutions (or for a reason I don't quite understand) it will get it wrong and create an image larger (or maybe smaller) than your line height which may cause an undesirable look. Set this value to either a positive or negative value which will be applied to the inline preview's image size. // Adjust the size of inline image previews by the offset given. // Please use either a positive or negative number. \"inline_preview_offset\" : 0 , If you need to set this per OS or per host, you can via multiconf .","title":"inline_preview_offset"},{"location":"usage/#inline_preview_position","text":"Previews can be positioned to the left or right of a color. Set this value to \"left\" or \"right to toggle its behavior. // Adjust the position of inline image previews. // (left|right) \"inline_preview_position\" : \"left\" ,","title":"inline_preview_position"},{"location":"usage/#upper_case_hex","text":"When inserting a color from the tooltip, this setting will determine if hex colors get uppercased or lowercased. // Upper case hex when inserting \"upper_case_hex\" : false ,","title":"upper_case_hex"},{"location":"usage/#use_webcolor_names","text":"Will determine if a HTML color name will be shown for the currently selected colors. If inserting a web color name, transparency will be removed. // Use webcolor names when value color matches a webcolor name. \"use_webcolor_names\" : true ,","title":"use_webcolor_names"},{"location":"usage/#click_color_box_to_pick","text":"This will make the color preview box in the Color Info Panel clickable. When set to color_picker and clicked, it will open the color picker via the ColorPicker plugin (if installed). When set to palette_picker and clicked, it will open the Palette Panel . The respective menu item will not be shown in the Color Info Panel once relocated to the color preview. // Color picker and palette picker by default // are accessed by clicking an icon on the color info panel. // Click access for one of thesecan be moved to the color box // (visual representation of the color). // (none|color_picker|palette_picker) \"click_color_box_to_pick\" : \"none\" ,","title":"click_color_box_to_pick"},{"location":"usage/#graphic_size","text":"Coarse scaling of the size of generated graphics. Graphics in the tooltips look best large as Sublime slightly distorts images, but on different screens, some of the tooltips (especially the internal color picker) may be too large or too small. graphic_size can be used to control the size of these generated images. Scaling is based off line height, and valid settings are small (1X), medium (1.5X), and large (2X). medium is the default. // If the color picker is too big or too small, try playing with this. // This is a coarse control which scales image size relative to the // approximate line height. small (1x), medium (1.5x), and large (2x). // (small | medium | large) \"graphic_size\" : \"medium\" , If you need to set this per OS or per host, you can via multiconf .","title":"graphic_size"},{"location":"usage/#graphic_scale","text":"Fine scaling of the size of generated graphics. This overrides graphic_size . // Fine scaling of image sizes. Overrides `graphic_size`. // Use an integer or floating point value. `null` disables fine scaling. \"graphic_scale\" : 1.5 , ```` ### `enable_color_picker` Enables the ability to launch the color picker from the tooltip . By default , the internal color picker will be used . If you have [ @ weslly ]( https : //github.com/weslly)'s [ColorPicker](https://packagecontrol.io/packages/ColorPicker) package installed, you can use [use_color_picker_package](#use_color_picker_package) to use it instead of the internal color picker. ```js // Enable color picker option. Will use native color picker // unless \"use_color_picker_package\" is enabled and external // package is installed. \"enable_color_picker\": true,","title":"graphic_scale"},{"location":"usage/#use_hex_color_picker","text":"Enables or disables the use of the hex color picker. When enabled, the color picker has a hex shape as the colors fan out from the white center. If disabled, the color picker will be a rectangular one that shows the colors by hue and by brightness. // This can be turned off to get a rectangular color picker // That displays possible options by hue and brightness/luminance. \"use_hex_color_picker\" : true , Disabled look","title":"use_hex_color_picker"},{"location":"usage/#use_color_picker_package","text":"If you have @weslly 's [ColorPicker][color-picker] package installed, user_color_picker_package will cause it to override the default color picker, but only the default color picker supports transparency. // Use https://github.com/weslly/ColorPicker for the color picker if installed. \"use_color_picker_package\" : false ,","title":"use_color_picker_package"},{"location":"usage/#enable_global_user_palettes","text":"Enables showing user palettes (found in Packages/User/color_helper.palettes ) in the Palette Panel . // Show global palettes in palette panel \"enable_global_user_palettes\" : true ,","title":"enable_global_user_palettes"},{"location":"usage/#enable_favorite_palette","text":"Enables showing the Favorites palette (found in Packages/User/color_helper.palettes ) in the Palette Panel . // Enable storing favorite colors to the favorite palette \"enable_favorite_palette\" : true ,","title":"enable_favorite_palette"},{"location":"usage/#enable_current_file_palette","text":"Enables scanning of the current active view buffer for colors and showing them in the Current Colors palette in the Palette Panel . // Enable showing current file color palette \"enable_current_file_palette\" : true ,","title":"enable_current_file_palette"},{"location":"usage/#enable_project_user_palettes","text":"Enables showing and storing of user palettes in the project file. Project palettes will be shown in the Palette Panel . // Enable project palettes in palette panel (Palettes stored in project file). \"enable_project_user_palettes\" : true","title":"enable_project_user_palettes"},{"location":"usage/#enable_color_conversions","text":"Enables showing the color conversion options on the Color Info Panel . // Enable color conversion options on color info panel \"enable_color_conversions\" : true ,","title":"enable_color_conversions"},{"location":"usage/#show_index_status","text":"Set whether indexing status is shown in the status bar. // Show index status in the status bar. \"show_index_status\" : true ,","title":"show_index_status"},{"location":"usage/#line_height_workaround","text":"Temporary workaround for Windows 10 HiDPI setups that reduces image sizes. // For Windows 10 HiDPI setups. This is a temporary workaround // to help reduce abnormally large color previews and other images. // This will be removed once the issue is fixed in Sublime Text 3. \"line_height_workaround\" : false ,","title":"line_height_workaround"},{"location":"usage/#image_border_color","text":"For themes with popups that have a very different background than what is found as the default code background, it may be desirable to override image borders with a color that blends better. Border cannot be applied to images with CSS, so this option was exposed to allow user override. Colors specified in the setting must be of the form #RRGGBB . null can be used to turn remove your override. // Override image border color. This is mainly for schemes that use a dramatically different // background for popups vs code background. Color should be in the form `#RRGGBB`. Alpha channels will // be ignored. \"image_border_color\" : \"##ff0000\"","title":"image_border_color"},{"location":"usage/#color_scanning","text":"Setting to control color scanning which is responsible for both auto-popups and constructing \"Current File Palette\". color_scanning is an array of rules. Each rule can target file(s) and enable certain scanning certain scopes for specific colors. Each rule is a dictionary. syntax_files , base_scopes , and extensions or used to target the a file for scanning; you can use a specific one, or multiple. \"color_scanning\" : [ { \"syntax_files\" : [], \"syntax_filter\" : \"allowlist\" , \"base_scopes\" : [ \"source.css\" , \"text.html\" ], \"scan_scopes\" : [ // CSS, CSS in HTML etc. (based on: Sublime Default) \"meta.property-value.css -comment -string\" , // CSS3, CSS3 in HTML etc. (based on: https://packagecontrol.io/packages/CSS3) \"meta.value.css -comment -string\" , // HTML attributes (based on: Sublime Default) \"meta.tag.inline.any.html string.quoted\" , \"meta.tag.any.html meta.attribute-with-value.style.html\" ], \"scan_completion_scopes\" : [], \"extensions\" : [], \"allowed_colors\" : [ \"css4\" ], \"use_hex_argb\" : false , \"compress_hex_output\" : true , \"space_separator_syntax\" : [ \"gray\" , \"hwb\" ] }, ]","title":"color_scanning"},{"location":"usage/#color_scanningsyntax_files","text":"syntax_files is an array of syntax file ( tmLanguage or sublime-syntax )names and are relative to Packages (extensions should be excluded). They are used to filter views that will be targeted for scanning. Depending on how syntax_filter is set, syntax_files will either require the files to be in the list or not in the list. If syntax_files is set as an empty array, all views will be targeted unless filtered further by other settings. Assuming that you have a tmLanguage file Packages/CSS/CSS.tmLanguage : \"color_scanning\" : [ { \"syntax_files\" : [ \"CSS/CSS\" ],","title":"color_scanning.syntax_files"},{"location":"usage/#color_scanningsyntax_filter","text":"syntax_filter will cause syntax_files to be treated as either a blocklist or allowlist . Acceptable values are \"blocklist\" and \"allowlist\" . \"allowlist\" is the default setting. \"color_scanning\" : [ { \"syntax_filter\" : \"allowlist\" ,","title":"color_scanning.syntax_filter"},{"location":"usage/#color_scanningbase_scopes","text":"base_scopes is used to target specific file views that are syntax highlighted with a specific base scope. This allows you to target multiple syntax highlighters that all use the same base scope. base_scopes is an array; if the array is left empty, all views will be targeted unless filtered further by other settings. \"color_scanning\" : [ { \"base_scopes\" : [ \"source.css\" ],","title":"color_scanning.base_scopes"},{"location":"usage/#color_scanningextensions","text":"extensions is used to target specific file views that a file name with the specified extension(s). extensions is an array; if the array is left empty, all views will be targeted unless filtered further by other settings. For this setting to work the file usually must exist on disk as views that do not exist on text usually do not have a file name. \"color_scanning\" : [ { \"extensions\" : [ \".css\" ],","title":"color_scanning.extensions"},{"location":"usage/#color_scanningscan_scopes","text":"scan_scopes is an array of scopes that will be searched for colors. Scopes in this array contain usually tmTheme scope syntax, so you can include scopes or exclude scopes etc. In the example below, we target meta.property-value.css , but only if it is not also scoped as a string or a comment . \"color_scanning\" : [ { \"scan_scopes\" : [ \"meta.property-value.css -comment -string\" ]","title":"color_scanning.scan_scopes"},{"location":"usage/#color_scanningscan_completion_scopes","text":"scan_completion_scopes is an array of scopes that will be searched for certain syntax for color completions. This is used only if scan_scopes is not sufficient to also capture colors that need to be completed. For example: sometimes scan_scopes is not broad enough to capture incomplete colors, but we don't want to generally want to scan so broadly when scanning an entire file for complete colors. Scopes in this array contain usually tmTheme scope syntax, so you can include scopes or exclude scopes etc. In the example below, we target source.scss and source.sass , but only if they are not also scoped as string or comment . \"color_scanning\" : [ { \"scan_completion_scopes\" : [ \"source.scss -comment -string\" , \"source.sass -comment -string\" ],","title":"color_scanning.scan_completion_scopes"},{"location":"usage/#color_scanningallowed_colors","text":"allowed_colors defines which colors will be scanned for in a specific file. It is an array of strings where each strings specifies a color type or category of colors to scan for. Value Description webcolors CSS3 color names plus CSS4's rebeccapurple . hex Hex colors in the form of #RRGGBB . hex_compressed Hex colors in the form of #RGB . hexa Hex colors with an alpha channel in the form #RRGGBBAA or #AARRGGBB if use_hex_argb is set to true . hexa_compressed Hex colors with an alpha channel in the form #RGBA or #ARGB if use_hex_argb is set to true . rgb RGB colors in the form rgb(255, 128, 0) or rgb(100%, 50%, 0%) . rgba RGBA colors in the form rgb(255, 128, 0, .5) or rgb(100%, 50%, 0%, .5) . It also supports CSS4's alpha as a percentage format: rgb(100%, 50%, 0%, 50%) . hsl HSL colors in the form hsl(360, 100%, 50%) . hsla HSLA colors in the form hsla(360, 100%, 50%, .5) . It also supports CSS4's alpha as a percentage format: hsla(360, 100%, 50%, 50%) . gray CSS4's gray format: gray(255) or gray(100%) . graya CSS4's gray with alpha format: gray(255, .5) or gray(100%, .5) . It also supports alpha as a percentage format: gray(100%, 50%) . hwb CSS4's HWB color format: hwb(360, 50%, 100%) . hwba CSS4's HWBA color format: hwb(360, 50%, 100%, 5) or hwb(360, 50%, 100%, 50%) . css4 All CSS4 formats: webcolors , hex , hex_compressed , rgb , rgba , hsl , hsla , gray , graya , hwb , hwba , hexa , hexa_compressed . all All color formats. \"color_scanning\" : [ { \"allowed_colors\" : [ \"css3\" ] Deprecated 3.0 The key css3 has been deprecated. While it will still be accepted, it is currently an alias for css4 .","title":"color_scanning.allowed_colors"},{"location":"usage/#color_scanninguse_hex_argb","text":"When scanning and processing hex rgb colors with alpha channels, process them as and output them with the alpha channel first opposed to at the end. By default the value is false . \"color_scanning\" : [ { \"use_hex_argb\" : true","title":"color_scanning.use_hex_argb"},{"location":"usage/#color_scanningcompress_hex_output","text":"When outputting hex formats compress the color if possible #334455 \u2192 #345 . The default is false . \"color_scanning\" : [ { \"compress_hex_output\" : true","title":"color_scanning.compress_hex_output"},{"location":"usage/#color_scanningspace_separator_syntax","text":"When representing colors in popups or inserting them, the color formats of rgb , hsl , hwb , and gray can be displayed in the traditional way or in the space separator form ( rgb(r g b / a) ). If desired, this new format can be enabled as default via the space_separator_syntax option. Most rules enable this for hwb and gray as the level 4 specifications do not allow the comma separated for for these new color formats. \"color_scanning\" : [ { \"space_separator_syntax\" : [ \"hwb\" , \"gray\" ]","title":"color_scanning.space_separator_syntax"},{"location":"usage/#multiconf","text":"Certain settings that lend them self better to be setting up per OS or per host will be configured to use multiconf . multiconf is a library that will parse a setting as a normal setting or a per OS and/or per host setting (if configured properly). For the settings that have this enabled, you can optionally use the format below to specify the setting per OS or per host. The optional multiconf format requires a dictionary with a special identifier #multiconf# and a list of dictionaries identified by a qualifier of the form \"<qualifier name>:<qualifier value>[;<qualifier name>:<qualifier value>]...\" For example, the following setting \"user_home\" : \"/home\" would result in get(\"user_home\") returning the value \"/home\" but it could also be replaced with \"user_home\" : { \"#multiconf#\" : [ { \"os:windows\" : \"C:\\\\Users\" }, { \"os:linux;host:his_pc\" : \"/home\" }, { \"os:linux;host:her_pc\" : \"/home/her/special\" } ] } Now the same configuration file will provide different values depending on the machine it's on. On an MS Windows machine the value returned by get will be \"C:\\Users\", and on a Linux machine with the host name his_pc the value will be \"/home\", etc.","title":"Multiconf"},{"location":"_snippets/abbr/","text":"","title":"Abbr"},{"location":"_snippets/links/","text":"","title":"Links"},{"location":"_snippets/refs/","text":"","title":"Refs"},{"location":"about/contributing/","text":"Contributing & Support Overview Sublime Versions Description ST3 Fully supported and actively maintained. Contribution from the community is encouraged and can be done in a variety of ways: Become a sponsor. Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests. Become a Sponsor Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via PayPal. GitHub Sponsors PayPal Bug Reports Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When an issue is created, a template will be shown, please fill out the appropriate sections. If the template is not followed, the issue will be marked Invalid and closed. When creating an issue on the repository, please provide as much info as possible: Provide environment information by running Preferences->Package Settings->ColorHelper->Support Info . The information will be copied to the clipboard; paste the info in issue. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. Provide links to 3 rd party syntax highlighting package you are using if applicable. The more info provided, the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed. Reviewing Code Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm. Pull Requests Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Please describe the change in as much detail as possible so I can understand what is being added or modified. If you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been resolved). Please reference and link related open bugs or feature requests in this pull if applicable. Make sure you've documented or updated the existing documentation if introducing a new feature or modifying the behavior of an existing feature that a user needs to be aware of. I will not accept new features or changes to existing features if you have not provided documentation describing the feature. Continuous integration tests on are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge. Running Validation Tests Tip If you are running Sublime on a Mac OS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below): chmod +x run_tests.sh ./run_tests.sh There are a couple of dependencies that must be present before running the tests. As ST3 is the only current, actively supported version, Python 3.3 must be used to validate the tests. Unit tests are run with pytest . You can install pytest via: pip install pytest The tests should be run from the root folder of the plugin by using the following command: py.test . Linting is performed on the entire project with flake8 , flake8-docstrings , and pep8-naming . These can be installed via: pip install flake8 pip install flake8-docstrings pip install pep8-naming Linting is performed with the following command: flake8 . Documentation Improvements A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of MkDocs , the Material theme , and PyMdown Extensions to render the docs. You can preview the docs if you install these two packages. The command for previewing the docs is mkdocs serve from the root directory. You can then view the documents at localhost:8000 .","title":"Contributing &amp; Support"},{"location":"about/contributing/#contributing--support","text":"","title":"Contributing &amp; Support"},{"location":"about/contributing/#overview","text":"Sublime Versions Description ST3 Fully supported and actively maintained. Contribution from the community is encouraged and can be done in a variety of ways: Become a sponsor. Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests.","title":"Overview"},{"location":"about/contributing/#become-a-sponsor","text":"Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via PayPal. GitHub Sponsors PayPal","title":"Become a Sponsor "},{"location":"about/contributing/#bug-reports","text":"Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When an issue is created, a template will be shown, please fill out the appropriate sections. If the template is not followed, the issue will be marked Invalid and closed. When creating an issue on the repository, please provide as much info as possible: Provide environment information by running Preferences->Package Settings->ColorHelper->Support Info . The information will be copied to the clipboard; paste the info in issue. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. Provide links to 3 rd party syntax highlighting package you are using if applicable. The more info provided, the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.","title":"Bug Reports"},{"location":"about/contributing/#reviewing-code","text":"Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.","title":"Reviewing Code"},{"location":"about/contributing/#pull-requests","text":"Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Please describe the change in as much detail as possible so I can understand what is being added or modified. If you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been resolved). Please reference and link related open bugs or feature requests in this pull if applicable. Make sure you've documented or updated the existing documentation if introducing a new feature or modifying the behavior of an existing feature that a user needs to be aware of. I will not accept new features or changes to existing features if you have not provided documentation describing the feature. Continuous integration tests on are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.","title":"Pull Requests"},{"location":"about/contributing/#running-validation-tests","text":"Tip If you are running Sublime on a Mac OS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below): chmod +x run_tests.sh ./run_tests.sh There are a couple of dependencies that must be present before running the tests. As ST3 is the only current, actively supported version, Python 3.3 must be used to validate the tests. Unit tests are run with pytest . You can install pytest via: pip install pytest The tests should be run from the root folder of the plugin by using the following command: py.test . Linting is performed on the entire project with flake8 , flake8-docstrings , and pep8-naming . These can be installed via: pip install flake8 pip install flake8-docstrings pip install pep8-naming Linting is performed with the following command: flake8 .","title":"Running Validation Tests"},{"location":"about/contributing/#documentation-improvements","text":"A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of MkDocs , the Material theme , and PyMdown Extensions to render the docs. You can preview the docs if you install these two packages. The command for previewing the docs is mkdocs serve from the root directory. You can then view the documents at localhost:8000 .","title":"Documentation Improvements"},{"location":"about/license/","text":"License ColorHelper is released under the MIT license. Copyright \u00a9 2015 - 2020 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE","title":"License"},{"location":"about/license/#license","text":"ColorHelper is released under the MIT license. Copyright \u00a9 2015 - 2020 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE","title":"License"}]}